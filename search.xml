<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DOM事件对象</title>
      <link href="2021/04/13/blog-js-11/"/>
      <url>2021/04/13/blog-js-11/</url>
      
        <content type="html"><![CDATA[<h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><p>事件对象封装了事件的相关信息</p><h2 id="获取事件对象"><a href="#获取事件对象" class="headerlink" title="获取事件对象"></a>获取事件对象</h2><ul><li>通过事件处理函数的参数获取</li><li>旧版本的IE浏览器通过window.event获取</li><li>window.event -获取鼠标事件</li></ul><h2 id="事件对象的通用成员"><a href="#事件对象的通用成员" class="headerlink" title="事件对象的通用成员"></a>事件对象的通用成员</h2><ol><li>target &amp; srcElement * -获取事件目标（事件源）</li></ol><ul><li><p>tagName -获取元素名称<br>  可以用来做事件委托：通过给祖先元素注册事件，在程序处理程序中判断事件源进行不同的处理。</p><p>  通常，事件委托用于动态生成元素的区域。元素内容比较繁杂区域使用较麻烦</p></li></ul><ol start="2"><li>currentTarget * -当前目标：获取绑定事件的元素，等效于this</li></ol><ul><li>type  用于获取当前事件的类型</li></ul><ol start="3"><li><p>preventDefault &amp; returnValue -阻止浏览器默认行为。例如：a元素的链接跳转 button的提交等</p><p> dom2使用preventDefault方法<br> dom0的方式：在事件处理程序中返回false</p><p> 针对a元素，可以设置为功能性链接解决跳转问题</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  </code></pre><p> 针对button元素，可以将button设置为普通的按钮[type=”button”]</p></li><li><p>stopPropagation方法 * -阻止事件冒泡</p></li><li><p>eventPhase -得到事件所处的阶段</p></li></ol><p>结果为：1、2、3<br>1为：事件捕获 阶段<br>2为：事件目标 阶段<br>3为：事件冒泡 阶段</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-优化</title>
      <link href="2021/03/09/hexo-note/"/>
      <url>2021/03/09/hexo-note/</url>
      
        <content type="html"><![CDATA[<h2 id="新建文章模板"><a href="#新建文章模板" class="headerlink" title="新建文章模板:"></a>新建文章模板:</h2><pre><code>title: &#123;&#123; title &#125;&#125;  #文章标题date: &#123;&#123; date &#125;&#125;    #文件创建时间author:             #文章作者img: 直接填链接      #文章封面图coverImg:直接填链接  #当本文章在首页轮播时需要显示的图片top: false          #文章是否置顶cover: false        #表示该文章是否需要加入到首页轮播封面中toc: true           #约束mathjax: false      #是否开启数学公式支持password:           #设置阅读文章验证密码 不填写默认没有summary:            #自定义的文章摘要内容 不填写则为文章首内容 categories:         #文章分类 只能写一个tags:               #文章标签 能写多个    -文章标签1    -文章标签2</code></pre><h2 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h2><h3 id="valine评论系统"><a href="#valine评论系统" class="headerlink" title="valine评论系统"></a>valine评论系统</h3><p>Valine 官方文档 <a href="https://valine.js.org/">https://valine.js.org/</a></p><ol><li>注册 LeanCloud </li><li>在LeanCloud中添加应用 添加开发版</li><li>点击设置&gt;应用keys</li><li>复制keys中 appID值和appKey值</li><li>粘贴到主题目录下配置文件中   _config.yml下的valine配置<br>valine:<br>enable: true #true为开启<br>appId: 粘贴对应的值<br>appKey: 粘贴对应的值</li></ol><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><ol><li>安装插件 指令如下<pre><code>npm i -S hexo-prism-plugin</code></pre></li><li>修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并添加代码如下：<pre><code>highlight:enable: false #改为falseline_number: trueauto_detect: falsetab_replace: &quot;&quot;wrap: truehljs: false</code></pre></li></ol><p>prism_plugin:<br>  mode: “preprocess” # realtime/preprocess<br>  theme: “tomorrow”<br>  line_number: false # default false<br>  custom_css:<br>```</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Markdow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM事件-事件注册中的addEventListener捕获与冒泡</title>
      <link href="2021/02/26/blog-js-10/"/>
      <url>2021/02/26/blog-js-10/</url>
      
        <content type="html"><![CDATA[<h1 id="详解addEventListener-捕获与冒泡"><a href="#详解addEventListener-捕获与冒泡" class="headerlink" title="详解addEventListener() 捕获与冒泡"></a>详解addEventListener() 捕获与冒泡</h1><p><strong>这篇笔记存在未证实的知识待处理（目标阶段的捕获和冒泡是否有用问题）</strong></p><h2 id="addEventListener的三个值"><a href="#addEventListener的三个值" class="headerlink" title="addEventListener的三个值"></a>addEventListener的三个值</h2><blockquote><p>1值 事件名称（事件类型）注意不加on<br>2值 处理函数 可以写多个处理程序<br>3值 使用时true表示在捕获阶段触发 默认为false 为冒泡阶段触发</p></blockquote><h2 id="在最底层（目标阶段）上一层-添加addEventListen的第三个值"><a href="#在最底层（目标阶段）上一层-添加addEventListen的第三个值" class="headerlink" title="在最底层（目标阶段）上一层 添加addEventListen的第三个值"></a>在最底层（目标阶段）上一层 添加addEventListen的第三个值</h2><blockquote><p>以下运行结果为:div捕获&gt;btn1&gt;btn2&gt;btn3&gt;div冒泡<br>如果该div不添加第三个值 运行结果为：btn1&gt;btn2&gt;btn3&gt;div捕获&gt;div冒泡 </p></blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- html代码： --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// js代码：</span><span class="token comment" spellcheck="true">// 得到button并给button注册点击事件 同时写入多个处理事件</span><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处理程序1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//处理程序2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"btn2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//处理程序3</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"btn3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给button父级div注册点击事件 同时写入多个处理事件</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListen</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处理程序4</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"div 捕获"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListen</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处理程序5</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"div 冒泡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><h2 id="当在目标阶段使用捕获和冒泡"><a href="#当在目标阶段使用捕获和冒泡" class="headerlink" title="当在目标阶段使用捕获和冒泡"></a>当在目标阶段使用捕获和冒泡</h2><blockquote><p>运行规则：<br>目标阶段中有处理程序设置为（捕获）true 那么会先运行该处理程序<br>注意1 只会在目标阶段内最前面运行 不会跑到外层（如父级以上）<br>注意2 如果在同一阶段有多个处理程序同设置为（捕获）true 那么会按照注册顺序依次执行<br>以下运行结果为：div捕获&gt;btn2&gt;btn3&gt;btn1&gt;div冒泡   浏览器 google Edge 有效</p></blockquote><blockquote><p>如果不是以上结果那么以上运行规则全作废 火狐 IE浏览器中 目标阶段（最里层）不存在捕获和冒泡 执行规则为注册先后<br>运行结果为：div捕获&gt;btn1&gt;btn2&gt;btn3&gt;div冒泡</p></blockquote><pre class=" language-js"><code class="language-js">btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处理程序1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//处理程序2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"btn2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//处理程序3</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"btn3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListen</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处理程序4</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"div1 捕获"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListen</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处理程序5</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"div2 冒泡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>默认运行规则为 冒泡规则 从里层到外层<br>设为捕获规则时 捕获规则 从外层到里层</li><li>执行多个同一元素事件时，按照注册顺序执行<br>执行不同的元素事件时，按照事件流的顺序执行（默认情况为冒泡）</li><li>阶段之间不会逾越<br>例如：有两个嵌套div 父级为div1子级为div2 两者都设为捕获 即使子级注册在前但最先执行的还是父级<br>该前提是在带有层级关系并同时都设置了捕获的情况下的规则<br>父级未设置捕获下 按照默认情况冒泡规则运行，最先运行的是子级运行完子级内所有的程序才会执行父级</li><li>在目标阶段（最里层）使用冒泡和捕获要看使用的浏览器<br>当前测试结果为：在google、Edge运行可以。 火狐、IE运行目标阶段只按照注册顺序执行 捕获冒泡无效果</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM事件-基础概念</title>
      <link href="2021/02/26/blog-js-9/"/>
      <url>2021/02/26/blog-js-9/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM事件-基础概念"><a href="#DOM事件-基础概念" class="headerlink" title="DOM事件-基础概念"></a>DOM事件-基础概念</h1><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li><p>事件：发生一件事</p></li><li><p>事件类型：发生什么事情；点击、鼠标按下、鼠标抬起、鼠标移入、鼠标移出、键盘按下、键盘抬起…</p></li><li><p>事件处理程序：一个函数，当某件事情发生时运行。</p></li><li><p>事件注册：将一个事件处理程序，挂载到某个事件上。</p></li></ul><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>事件流：当某个事件发生的时候，哪些元素会监听到该事件发生，这些元素发生该事件的顺序。<br><img src="https://i.loli.net/2021/03/15/zCTZXKUvgYqyjSA.jpg" alt="事件流"><br><strong>当一个元素发生了某个事件时，那该元素的所有祖先元素都发生了该事件</strong></p><p>微软看法：事件冒泡：先触发最里层的元素，然后再依次触发外层元素<br>网景看法：事件捕获：先触发外层的元素，然后再依次触发里面元素</p><p>目前，标准规定，默认情况下，事件是冒泡的方式触发。</p><p>事件源、事件目标：事件目标阶段的元素（最里层元素）</p><p>事件捕获 从外到内<br>事件冒泡 从内到外</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM事件-事件注册</title>
      <link href="2021/02/26/blog-js-8/"/>
      <url>2021/02/26/blog-js-8/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM事件-事件注册"><a href="#DOM事件-事件注册" class="headerlink" title="DOM事件-事件注册"></a>DOM事件-事件注册</h1><p>事件绑定</p><h2 id="dom0版本"><a href="#dom0版本" class="headerlink" title="dom0版本"></a>dom0版本</h2><p>将事件名称前面加上on，作为dom的属性名，给该属性赋值为一个函数，即为事件注册。</p><p>事件移除：重新给事件属性赋值，通常赋值为null和undefined</p><h2 id="dom2版本"><a href="#dom2版本" class="headerlink" title="dom2版本"></a>dom2版本</h2><p>dom对象.addEventListener：注册事件</p><pre><code> addEventListener(&quot;click&quot;,function()&#123; console.log(&quot;1&quot;)&#125;,true/false);</code></pre><blockquote><p>1值 事件名称（事件类型）注意不加on<br>2值 处理函数 可以写多个处理程序<br>3值 使用时表示是否在捕获阶段触发 默认为false 为冒泡阶段触发</p></blockquote><p>与dom0的区别</p><ol><li>dom2可以为某个元素的同一个事件，添加多个处理程序，按照注册的先后顺序运行</li><li>dom2允许开发者控制事件处理的阶段，使用第三个参数，表示是否在捕获阶段触发<ol><li>如果元素是目标元素（事件源），第三个参数无效</li></ol></li></ol><p>事件的移除：dom对象.removeEventListener(事件名, 处理函数);</p><p><strong>dom2中如果要移除事件，不能使用匿名函数</strong></p><p><strong>细节</strong>：<br>了解就行了</p><ol><li>dom2在IE8及以下不兼容，需要使用attachEvent，detachEvent添加和移除事件</li><li>添加和移除事件时，可以将第三个参数写为一个对象，进行相关配置</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM事件-基础概念</title>
      <link href="2021/02/26/blog-js-7/"/>
      <url>2021/02/26/blog-js-7/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM事件-基础概念"><a href="#DOM事件-基础概念" class="headerlink" title="DOM事件-基础概念"></a>DOM事件-基础概念</h1><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li><p>事件：发生一件事</p></li><li><p>事件类型：发生什么事情；点击、鼠标按下、鼠标抬起、鼠标移入、鼠标移出、键盘按下、键盘抬起…</p></li><li><p>事件处理程序：一个函数，当某件事情发生时运行。</p></li><li><p>事件注册：将一个事件处理程序，挂载到某个事件上。</p></li></ul><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>事件流：当某个事件发生的时候，哪些元素会监听到该事件发生，这些元素发生该事件的顺序。<br><img src="https://i.loli.net/2021/03/15/zCTZXKUvgYqyjSA.jpg" alt="事件流"><br><strong>当一个元素发生了某个事件时，那该元素的所有祖先元素都发生了该事件</strong></p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>            点击我        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 给button注册点击事件</span>        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给div注册点击事件</span>        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给body注册点击事件</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给html注册点击事件</span>        document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给整个文档注册点击事件</span>        document<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"document"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>以上输出的结果依次为button&gt;div&gt;body&gt;html&gt;document<br>事件流的演示  运行顺序（默认情况下）：冒泡方式触发-从里到外<br>当一个元素发生了某个事件时，那该元素的所有祖先元素都发生了该事件</p><p>微软看法：事件冒泡：先触发最里层的元素，然后再依次触发外层元素<br>网景看法：事件捕获：先触发外层的元素，然后再依次触发里面元素</p><blockquote><p>目前，标准规定，默认情况下，事件是冒泡的方式触发。</p></blockquote><p>事件源、事件目标：事件目标阶段的元素（最里层元素）</p><p><strong>事件捕获 从外到内</strong><br><strong>事件冒泡 从内到外</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM元素样式</title>
      <link href="2021/02/26/blog-js-6/"/>
      <url>2021/02/26/blog-js-6/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM元素样式"><a href="#DOM元素样式" class="headerlink" title="DOM元素样式"></a>DOM元素样式</h1><h2 id="控制dom元素的类样式"><a href="#控制dom元素的类样式" class="headerlink" title="控制dom元素的类样式"></a>控制dom元素的类样式</h2><blockquote><p>className： 获取或设置元素的类名</p></blockquote><blockquote><p>classList： dom4的新属性，是一个用于控制元素类名的对象 IE10以下不兼容</p></blockquote><ul><li>classList.add：用于添加一个类名</li><li>classList.remove：用于移除一个类名</li><li>classList.contains：用于判断一个类名是否存在 存在某个元素中</li><li>classList.toggle：用于添加/移除一个类名 <pre><code>toggle(类名,false/true) 只写类名时等于循环添加删除（点击1次为删除指定类名，第几第2次指定类名又会重新添加上）写两个值时false为强制删除 true强制添加 ie不支持第二个值谨慎使用toggle第二个值如同true=(classList.add) false=(classList.remove)</code></pre></li></ul><h2 id="获取样式"><a href="#获取样式" class="headerlink" title="获取样式"></a>获取样式</h2><p><strong>CSS的短横线命名，需要转换为小驼峰命名</strong>如下<br>backgroun-color=backgroundColor</p><pre class=" language-js"><code class="language-js">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>dom.style：得到<strong>行内样式</strong>对象</li><li>window.getComputedStyle(dom元素)：得到某个元素最终计算的样式<ul><li>可以有第二个参数，用于得到某个元素的某个伪元素样式</li><li>getComputedStyle(当前对象div, “当前对象的伪元素before/after”)</li></ul></li></ul><h2 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h2><p>dom.style.样式名 = 值</p><p>！注意设置的样式会存放在行内，同时该方式只能设置为行内样式</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog</title>
      <link href="2021/02/17/blog-1/"/>
      <url>2021/02/17/blog-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Markdow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdow的使用</title>
      <link href="2021/02/17/blog-markdow/"/>
      <url>2021/02/17/blog-markdow/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown的使用"><a href="#Markdown的使用" class="headerlink" title="Markdown的使用"></a>Markdown的使用</h1><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="使用-号标记"><a href="#使用-号标记" class="headerlink" title="使用 # 号标记"></a>使用 # 号标记</h2><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h1><p>段落的换行是使用两个以上空格加上回车 </p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong></p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><hr><hr><hr><hr><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>使用两组英文<del>包裹要进行删除的内容<br>~~Markdown</del></p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以使用html中的代码<u></u></p><p><u>Markdown</u></p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>书写格式[^要注明的文本]</p><p>Markdown[^test]</p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>Markdown 支持有序列表和无序列表。</p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容</p><ul><li>test1</li><li>test2</li></ul><ul><li>test1</li><li>test2</li></ul><ul><li>test1</li><li>test2<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2>有序列表使用数字并加上 . 号来表示，如：</li></ul><ol><li>test1</li><li>test2</li></ol><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p><blockquote><p>test1<br>test2</p></blockquote><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>使用<code>test </code> 进行包裹代码 并指定一种语言（也可以不指定）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'RUNOOB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>链接使用方法如下：</p><p><a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">链接名称</a> 或者 &lt;链接地址&gt;</p><p><a href="https://wwww.baidu.com/">百度</a></p><p><a href="https://wwww.baidu.com/">https://wwww.baidu.com</a></p><h2 id="声明变量在引用链接的方式"><a href="#声明变量在引用链接的方式" class="headerlink" title="声明变量在引用链接的方式"></a>声明变量在引用链接的方式</h2><p><code>[声明变量]:链接地址</code> <code>[变量调用]</code></p><p><a href="https://wwww.baidu.com/">test</a></p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p><code>![alt 属性文本](图片地址)</code><br><img src="https://i.loli.net/2021/03/15/yu9YzQwGB4iXlv3.jpg" alt="aa"></p><p><code>![alt 属性文本](图片地址 &quot;可选标题&quot;)</code></p><p><img src="https://i.loli.net/2021/03/15/yu9YzQwGB4iXlv3.jpg" alt="属性文本" title="可选标题"></p><h1 id="声明变量在引用该图片"><a href="#声明变量在引用该图片" class="headerlink" title="声明变量在引用该图片"></a>声明变量在引用该图片</h1><p>也可以像网址那样对图片网址使用变量<br>[test2]:<a href="https://i.loli.net/2021/03/15/yu9YzQwGB4iXlv3.jpg">https://i.loli.net/2021/03/15/yu9YzQwGB4iXlv3.jpg</a></p><p>[test2]</p><blockquote><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p></blockquote><img src="https://i.loli.net/2021/03/15/yu9YzQwGB4iXlv3.jpg" width="50%"><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><p>语法格式如下：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h2 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h2><p>我们可以设置表格的对齐方式：</p><p>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐。<br>实例如下：</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h1 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h1><p>支持的 HTML 元素<br>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><p><strong>文本加粗</strong><br>** 正常显示星号 **</p><h2 id="数学公式使用-进行包裹"><a href="#数学公式使用-进行包裹" class="headerlink" title="数学公式使用$$$$ 进行包裹"></a>数学公式使用$$$$ 进行包裹</h2><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><ol><li>横向流程图源码格式：</li></ol><pre class=" language-mermaid"><code class="language-mermaid">graph LRA[方形] -->B(圆角)    B --> C&#123;条件a&#125;    C -->|a=1| D[结果1]    C -->|a=2| E[结果2]    F[横向流程图 ]</code></pre><ol start="2"><li>竖向流程图源码格式：</li></ol><pre class=" language-mermaid"><code class="language-mermaid">graph TDA[方形] --> B(圆角)    B --> C&#123;条件a&#125;    C --> |a=1| D[结果1]    C --> |a=2| E[结果2]    F[竖向流程图]</code></pre><ol start="3"><li>标准流程图源码格式：</li></ol><pre class=" language-flow"><code class="language-flow">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st->op->condcond(yes)->io->econd(no)->sub1(right)->op</code></pre><ol start="4"><li>标准流程图源码格式（横向）：</li></ol><pre class=" language-flow"><code class="language-flow">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st(right)->op(right)->condcond(yes)->io(bottom)->econd(no)->sub1(right)->op</code></pre><ol start="5"><li>UML时序图源码样例：</li></ol><pre class=" language-sequence"><code class="language-sequence">对象A->对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B-->对象A: 我很好(响应)对象A->对象B: 你真的好吗？</code></pre><ol start="6"><li>UML时序图源码复杂样例：</li></ol><pre class=" language-sequence"><code class="language-sequence">Title: 标题：复杂使用对象A->对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B-->对象A: 我很好(响应)对象B->小三: 你好吗小三-->>对象A: 对象B找我了对象A->对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩</code></pre><ol start="7"><li>UML标准时序图样例：</li></ol><pre class=" language-mermaid"><code class="language-mermaid">%% 时序图例子,-> 直线，-->虚线，->>实线箭头  sequenceDiagram    participant 张三    participant 李四    张三->王五: 王五你好吗？    loop 健康检查        王五->王五: 与疾病战斗    end    Note right of 王五: 合理 食物 <br/>看医生...    李四-->>张三: 很好!    王五->李四: 你怎么样?    李四-->王五: 很好!</code></pre><ol start="8"><li>甘特图样例：</li></ol><pre class=" language-gantt"><code class="language-gantt">dateFormat  YYYY-MM-DD   title 使用mermaid语言定制甘特图section 任务1已完成的任务           :done,    des1, 2014-01-06,2014-01-08正在进行的任务               :active,  des2, 2014-01-09, 3d待完成任务1               :         des3, after des2, 5d待完成任务2              :         des4, after des3, 5dsection 关键任务已完成的关键任务 :crit, done, 2014-01-06,24h已完成的关键任务2         :crit, done, after des1, 2d正在进行的关键任务             :crit, active, 3d待完成的关键任务        :crit, 5d待完成任务           :2d待完成任务2                      :1dsection 文档编写描述甘特图语法               :active, a1, after des1, 3d完成甘特图实例1      :after a1  , 20h完成甘特图实例2    :doc1, after a1  , 48h</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Markdow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM元素操作</title>
      <link href="2021/02/06/blog-js-5/"/>
      <url>2021/02/06/blog-js-5/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM元素操作"><a href="#DOM元素操作" class="headerlink" title="DOM元素操作"></a>DOM元素操作</h1><h2 id="初识元素事件"><a href="#初识元素事件" class="headerlink" title="初识元素事件"></a>初识元素事件</h2><p>元素事件：某个元素发生一件事（被点击 click）</p><p>事件处理程序：是一个函数，发生了一件事，应该做什么事情</p><p>注册事件：将事件处理程序与某个事件关联</p><p><strong>this关键字在事件处理程序中指代当前发生的事件元素</strong></p><h2 id="获取和设置元素属性"><a href="#获取和设置元素属性" class="headerlink" title="获取和设置元素属性"></a>获取和设置元素属性</h2><ul><li>通用方式：getAttribute、setAttribute  只能得到原始值  不推荐使用</li></ul><h3 id="可识别属性"><a href="#可识别属性" class="headerlink" title="可识别属性"></a>可识别属性</h3><p>正常的HTML属性  例如：input</p><ul><li>dom对象.属性名：推荐</li></ul><p>细节：</p><ol><li>正常的属性即使没有复制，也有默认值</li><li>布尔属性在dom对象中，得到的是boolean</li><li>某些表单元素可以获取到某些不存在的属性</li><li>某些属性与标识符冲突，此时，需要更换属性名</li></ol><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>HTML5 建议自定义属性使用<code>data-</code>作为前缀</p><p>如果遵从HTML5 自定义属性规范，可以使用<code>dom对象.dataset.属性名</code>控制属性</p><p><strong>删除自定义属性</strong></p><ul><li>removeAttribute(“属性名”);</li><li>delete dom.dataset.属性名</li></ul><h2 id="获取和设置元素内容"><a href="#获取和设置元素内容" class="headerlink" title="获取和设置元素内容"></a>获取和设置元素内容</h2><ul><li>innerHTML：获取和设置元素的内部HTML文本</li><li>innerText：获取和设置元素内部的纯文本，仅得到元素内部显示出来的文本</li><li>textContent：获取和设置元素内部的纯文本，与innerTexttext不同在于 Content得到的是内部源代码中的文本 显示源码格式</li></ul><h2 id="元素结构重构"><a href="#元素结构重构" class="headerlink" title="元素结构重构"></a>元素结构重构</h2><ul><li>父元素.appendChild(元素)：在某个元素末尾加入一个子元素</li><li>父元素.append(元素1,元素2，元素N) 在某个元素末尾加入1或多个元素（还未成为标准慎用）</li><li>父元素.insertBefore(待插入的元素, 哪个元素之前或者节点前)</li><li>父元素.replaceChild(替换的元素, 被替换的元素)</li></ul><p>细节：</p><p>更改元素结构效率较低，尽量少用。</p><h2 id="创建和删除元素"><a href="#创建和删除元素" class="headerlink" title="创建和删除元素"></a>创建和删除元素</h2><h3 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h3><ul><li><p>document.createElement(“元素名”)：创建一个元素对象</p><ul><li>document.createTextNode(“文本”)</li><li>document.createDocumentFragment(): 创建文档片段</li></ul></li><li><p>dom对象.cloneNode(是否深度克隆 true/false)：复制一个新的dom对象并返回</p></li></ul><blockquote><p>childNodes也是实时集合</p></blockquote><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>从子节点列表中删除某个节点</p><ul><li>removeChild：父元素调用，传入子元素</li><li>remove：把自己删除</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取DOM节点</title>
      <link href="2021/02/05/blog-js-4/"/>
      <url>2021/02/05/blog-js-4/</url>
      
        <content type="html"><![CDATA[<h1 id="获取DOM节点"><a href="#获取DOM节点" class="headerlink" title="获取DOM节点"></a>获取DOM节点</h1><p>获取dom对象</p><blockquote><p>全局对象 window 中有属性document，代表的是整个文档节点</p></blockquote><h2 id="旧的获取元素节点的方式"><a href="#旧的获取元素节点的方式" class="headerlink" title="旧的获取元素节点的方式"></a>旧的获取元素节点的方式</h2><blockquote><p>DOM 0 版本</p></blockquote><ul><li>document.body：获取body元素节点</li><li>document.head：获取head元素节点</li><li>document.links：获取页面上所有的超链接元素节点，类数组</li><li>document.anchors：获取页面上所有的锚链接(具有name属性)元素节点</li><li>document.forms：获取页面中所有的form元素节点</li></ul><h2 id="新的获取元素节点的方式"><a href="#新的获取元素节点的方式" class="headerlink" title="新的获取元素节点的方式"></a>新的获取元素节点的方式</h2><blockquote><p>consele.dir(document.getElementById(“id”)); 查看对象</p></blockquote><h3 id="通过方法获取"><a href="#通过方法获取" class="headerlink" title="通过方法获取"></a>通过方法获取</h3><ul><li>document.getElementById：通过id获取对应id的元素</li><li>document.getElementsByTagName: 通过元素名称获取元素</li><li>document.getElementsByClassName：通过元素的类样式获取元素，IE9以下无效</li><li>document.getElementsByName：通过元素的name属性值获取元素</li><li>document.querySelector：通过CSS选择器获取元素，得到匹配的第一个，可以选择嵌套的css类名 IE8以下无效 </li><li>document.querySelectorAll：通过CSS选择器获取元素，得到所有匹配的结果，可以选择嵌套的css类名 IE8以下无效</li><li>document.documentElement: 获取根元素</li></ul><p>细节：</p><ol><li>在所有的得到类数组的方法中，除了querySelectorAll，其他的方法都是实时更新的。</li><li>getElementById 得到元素执行效率最高。</li><li>书写了id的元素，会自动成为window对象的属性。它是一个实时的单对象。事实上的标准。不推荐使用。</li><li>getElementsByTagName、getElementsByClassName、querySelector、querySelectorAll，可以作为其他元素节点对象的方法使用</li></ol><h3 id="根据节点关系获取节点"><a href="#根据节点关系获取节点" class="headerlink" title="根据节点关系获取节点"></a>根据节点关系获取节点</h3><blockquote><p>这一块节点只作为了解 </p></blockquote><ul><li><strong>parentNode</strong>：获取父节点（元素、文档）</li><li>previousSibling：获取上一个兄弟节点   （空格注释字符 都为节点）</li><li>nextSibling：获取下一个兄弟节点</li><li>childNodes：获取所有的子节点</li><li>firstChild：获取第一个子节点</li><li>lastChild：获取最后一个子节点</li><li>attributes: 获取某个元素的属性节点</li></ul><blockquote><p>重点使用下面的元素节点<br>获取元素节点</p></blockquote><ul><li>parentElement：获取父元素</li><li>previousElementSibling：获取上一个兄弟元素</li><li>nextElementSibling：获取下一个兄弟元素</li><li>children：获取子元素</li><li>firstElementChild：获取第一个子元素</li><li>lastElementChild：获取最后一个子元素</li></ul><h2 id="获取节点信息"><a href="#获取节点信息" class="headerlink" title="获取节点信息"></a>获取节点信息</h2><ul><li>nodeName：获取节点名称</li><li>nodeValue：获取节点的值</li><li>nodeType：节点类型，是一个数字</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web Api概述</title>
      <link href="2021/02/04/blog-js-3/"/>
      <url>2021/02/04/blog-js-3/</url>
      
        <content type="html"><![CDATA[<h1 id="web-api概述"><a href="#web-api概述" class="headerlink" title="web api概述"></a>web api概述</h1><p>标准库：ECMAScript中的对象和函数</p><p>Web Api：浏览器宿主环境中的对象和函数</p><ol><li>知识繁杂</li><li>成体系的知识</li><li>程序思维：知识+程序思维 = 应用</li><li>兼容性：了解，不记忆</li></ol><p>Web Api：</p><ul><li>BOM：Browser Object Model，浏览器对象模型</li><li>DOM：Document Object Model，文档对象模型</li></ul><p>BOM：控制浏览器本身<br>DOM：控制HTML文档</p><p>ES 由 ECMAScript 规定的<br>WebApi 由 W3C（万维网联盟） 制定</p><h2 id="关于DOM"><a href="#关于DOM" class="headerlink" title="关于DOM"></a>关于DOM</h2><ul><li>DOM 0</li><li>DOM 1</li><li>DOM 2</li><li>DOM 3</li><li>DOM 4  2015年</li></ul><p><strong>DOM是什么</strong></p><p>DOM的核心理念，是将一个HTML或XML文档，用对象模型表示，每个对象称之为dom对象</p><p>dom对象又称之为节点Node</p><p>节点的类型：</p><ul><li>DocumentType，文档类型节点</li><li>Document，文档节点，表示整个文档</li><li>Comment，注释节点</li><li>Element，元素节点</li><li>Text，文本节点</li><li>Attribute，属性节点</li><li>DocumentFragment，文档片段节点</li></ul><p>dom树：文档中不同的节点形成的树形结构。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
            <tag> Api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RegExp正则表达式</title>
      <link href="2021/02/03/blog-js-2/"/>
      <url>2021/02/03/blog-js-2/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式是国际标准，跨越语言</p><p>正则表达式是一个规则，用于验证字符串。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol><li>字面量匹配</li></ol><p>规则中直接书写字面量字符</p><ol start="2"><li><p>特殊字符</p><pre><code>.   匹配除换行符 \n 之外的所有单字符。要匹配 . ，请使用 \. ...a... 释义 匹配a前和a后都必须要有3个字符的</code></pre></li></ol><p>^   匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。<br>^abc… 释义 匹配输入字符串的开始位置为abc且后面接有3个字符 注意只匹配开始位置的其他位置匹配不成功</p><p>$   匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。<br>^abc…&amp; 释义：匹配输入字符串的开始位置为abc且后面接有3个字符后就结束 （限定为6位数，多一位就不在匹配）</p><p>? 匹配前面的一次或者0次</p><pre><code>3. 转义符</code></pre><p>\n  匹配一个换行符<br>\r  匹配一个回车符<br>\t  匹配一个制表符<br>\s  匹配一个空白字符<br>\S  匹配一个除空白字符以外的所有字符<br>\b  匹配一个字符串的边界 （字符串开始和结束都是边界 空格 换行 制表符都是边界）<br>\B  非单词边界匹配<br>\d  匹配一个数字字符 [0~9] 例：^1\d\d\d\d\d\d\d\d\d\d$ 以1开头的十一位数的号码<br>\D  匹配一非个数字字符<br>\w  匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’<br>\W  匹配非字母、数字、下划线。<br>\u  Unicode 字符转换匹配 \u4f60\u771f\u68d2=你真棒 </p><pre><code>4. 字符集</code></pre><p>[字符范围]  分别匹配字符范围内的一个字符<br>[^0-9] 释义：匹配除0到9之间以外的字符 =\D*<br>匹配所有字符：<br>    [\d\D]+ 释义：匹配所有数字字符和非数字字符 至少1个<br>    [\s\S]+</p><pre><code>[a-z] [a-zA-Z] [0-9] [A-Za-z0-9_]范围可以随意组合匹配中文： ```[\u4e00-\u9FA5]``` 汉字unicode编码范围5. 量词**指定是（前面）的规则出现的次数** 量词前最近的</code></pre><p>单纯匹配本身时例如 + 时需要在其前面 加一个 \ 其他符号同理</p><ul><li>  匹配前面的子表达式零次或多次</li></ul><ul><li>  至少匹配一个或者多个 例：\d+ 释义：至少匹配到一个数字<br>?   匹配零个或者1个<br>{n}: 匹配n个<br>{n,}: 匹配&gt;=n个<br>{n,m}: 匹配n-m个<pre><code></code></pre>例1：匹配6-16位的密码   ^[0-9a-zA-Z]{6,16}$ 释义：匹配范围[0到9 a到z A到Z]6到16位数的字符<br>例2: 匹配2到6位的中文名字 ^[\u4e00-\u9FA5]{2,6}$<pre><code></code></pre></li></ul><ol start="6"><li>或者<br>多个规则之间，适用或者 <code>|</code>,表示多个规则任选其一</li></ol><h2 id="JS中的应用"><a href="#JS中的应用" class="headerlink" title="JS中的应用"></a>JS中的应用</h2><p>js中，正则表达式表现为一个对象，该对象是通过构造函数RegExp</p><h3 id="创建正则对象"><a href="#创建正则对象" class="headerlink" title="创建正则对象"></a>创建正则对象</h3><ol><li>字面量模式<br><code>var reg1 = /^-?\d+(\.0+)?$/;</code></li><li>构造函数模式<br> <code> var reg2 = new RegExp(&quot;^-?\d+(\.0+)?$&quot;)</code></li><li>直接调用<br> <code>RegExp(&quot;^-?\d+(\.0+)?$&quot;);</code><br> <strong>注意构造函数模式和直接调用是两种不同的创建方式区别：当二者不是直接书写的正则 而是调用的正则构造函数创建的是一个新地址，而直接调用的使用的还是原来的地址</strong></li></ol><h3 id="参数-这三者默认是关闭的"><a href="#参数-这三者默认是关闭的" class="headerlink" title="参数 这三者默认是关闭的"></a>参数 这三者默认是关闭的</h3><p><strong>开启.书写位置正则后面 //g、i、m</strong><br>g 全局匹配 找到所有匹配的<br>i 忽略大小写<br>m 多行匹配 匹配每一行的开始和结束(^和$)</p><h3 id="正则实例成员"><a href="#正则实例成员" class="headerlink" title="正则实例成员"></a>正则实例成员</h3><ul><li><p>global        是否开启了全局搜索 只读属性</p></li><li><p>ignoreCase    是否开启了忽略了大小写</p></li><li><p>multiline     是否开启了多行匹配</p></li><li><p>source        目前规则 得到当前正则字符串</p></li><li><p>test方法：验证某个字符串是否满足规则<br> test()函数 判断一个字符串是否匹配 并且在全局匹配模式下影响下一次匹配的位置<br> 结论：开启了全局匹配情况下 第一次匹配成功后索引号会停留在上一次匹配成功的字符上<br> 当连续进行下一次匹配时会从上一次匹配成功结束的索引开始匹配后面的字符，<br> 后面没有可匹配的那就判断为false 在下一次匹配时 重头开始匹配。<br> 没开启全局匹配不会记录索引每次都是重新匹配并只匹配一个.</p></li><li><p>exec方法：execute，执行匹配，得到匹配结果。</p></li></ul><blockquote><p>正则表达式，默认情况下，适用贪婪模式<br>在量词后，加上?，表示进入非贪婪模式（把？当为量词时含义是匹配0次或1次 把？写于量词后表示非贪婪模式）</p></blockquote><h3 id="字符串对象中的正则方法"><a href="#字符串对象中的正则方法" class="headerlink" title="字符串对象中的正则方法"></a>字符串对象中的正则方法</h3><ul><li>split 用于把一个字符串分割成字符串数组 第二个参数设定分割数量，默认全分割</li><li>replace 替换与正则表达式匹配的字符 参数一为正则表达式 参数二为替换数据同时也可以写函数</li><li>search 在给定字符串中搜索匹配项，并返回在字符串中找到字符的索引号永远是只找第一匹配的，全局非全局下作用相同</li><li>match 对给定字符串执行匹配并返回匹配结果</li></ul><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a>捕获组</h3><p>(1): 用小括号包裹的部分叫做捕获组，捕获组会出现在匹配结果中 每一个小括号为一个捕获组 嵌套根据实际情况看<br>    在正则表达式中，使用某个捕获组，使用方法：<code>\捕获组编号</code></p><p>(2):捕获组可以命名，叫做具名捕获组(命名捕获组) <code>在小括号中前面写入 ?&lt;命名&gt;</code></p><pre><code> var p = &quot;2020-6-26,2020-5-1,2020-11-2,2020-11-15&quot;;        var regs = /(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;1,2&#125;)-(?&lt;day&gt;\d&#123;1,2&#125;)/g;        while (result = regs.exec(p)) &#123;            // console.log(result);            // 0--是整个捕获组       捕获组1       捕获组2     捕获组3            console.log(result.groups);            console.log(result[0], result.groups.year, result.groups.month, result.groups.day);        &#125;        // 下面为输出释义        /*            0: &quot;2ah&quot;   这里是所有匹配值            1: &quot;2a&quot;    这里是小括号捕获组            groups:     记录命名的捕获组 叫做 (具名捕获组)        */        </code></pre><p>(3):非捕获组  捕获组是默认是开启的 会占用资源浪费执行效率 关闭捕获方法：在小括号中前面写入 ?:</p><pre><code>        // var p = &quot;2020-6-26,2020-5-1,2020-11-2,2020-11-15&quot;;        // // 年不会被捕获了 只会匹配输出        // var regs = /(?:\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;1,2&#125;)-(?&lt;day&gt;\d&#123;1,2&#125;)/g;        // while (result = regs.exec(p)) &#123;        //     // 0--是整个捕获组       捕获组1       捕获组2     捕获组3        //     console.log(result[0], result.groups.year, result.groups.month, result.groups.day);        //     console.log(result.groups);        // &#125;</code></pre><p><strong>了解</strong></p><pre><code> // 方法replace()--替换 也可以使用捕获组 例题：把一个日期中的横杠换成斜杠 但两个日期间的符号不改变         var p = &quot;2020-6-26,-2020-5-1,2020-11-2,-2020-11-15&quot;;        var regs = /(\d&#123;4&#125;)-(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)/g;        //   方法1.   function 1值匹配结果,后面的值表示捕获组        // p = p.replace(regs, function (match, g1, g2, g3) &#123;        //     console.log(match, g1, g2, g3);        //             //     return `$&#123;g1&#125;/$&#123;g2&#125;/$&#123;g3&#125;`        // &#125;);        // 方法2. 使用特殊符号 /$1 表示捕获组1 $1前后添加数据为替换值        p = p.replace(regs, &quot;/$1/$2/$3&quot;);        console.log(p);</code></pre><h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><p>释义：重复正则匹配上一次的匹配结果满足该要求才为匹配项</p><pre><code>//例题： var reg = /(\d&#123;2&#125;)\1/; //释义： 匹配两个数字并重复一次的        var s = &quot;1212&quot;;        var s2 = &quot;1213&quot;        console.log(reg.test(s));  //true        // console.log(reg.test(s2));  //false</code></pre><h3 id="正向断言-预查"><a href="#正向断言-预查" class="headerlink" title="正向断言(预查)"></a>正向断言(预查)</h3><p>检查某个字符后面的字符是否满足某个规则，该规则不成为匹配结果，并且不称为捕获组</p><h3 id="负向断言-预查"><a href="#负向断言-预查" class="headerlink" title="负向断言(预查)"></a>负向断言(预查)</h3><p>检查某个字符后面的字符是否不满足某个规则，该规则不成为匹配结果，并且不称为捕获组</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> RegExp正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Date对象方法-练习</title>
      <link href="2021/02/02/blog-js-1/"/>
      <url>2021/02/02/blog-js-1/</url>
      
        <content type="html"><![CDATA[<ol><li><p>编写一个函数，用于返回一个利于阅读的日期字符串格式   年 - 月 - 日 时: 分: 秒</p><pre><code>function Time(date) &#123;         var year = date.getFullYear().toString().padStart(4, 0);         var month = date.getMonth().toString().padStart(2, 0);         var day = date.getDate().toString().padStart(2, 0);         var hours = date.getHours().toString().padStart(2, 0);         var minutes = date.getMinutes().toString().padStart(2, 0);         var seconds = date.getSeconds().toString().padStart(2, 0);         return `$&#123;year&#125;-$&#123;month&#125;-$&#123;day&#125; $&#123;hours&#125;:$&#123;minutes&#125;:$&#123;seconds&#125;`     &#125;;     console.log(Time(new Date()));</code></pre></li><li><p>生日倒计时 计算用户当下距离生日时日天数 如果已过则计算明年的</p><pre><code>function getDaysToBirthday(month, day) &#123;         var now = new Date();         var thisYear = now.getFullYear();  //调用函数获取当前年份并赋值给thisYear         // 用户今年的生日日期         var birthday = new Date(thisYear, month - 1, day);         if (birthday &lt; now) &#123;   // 判断今年的生日是否已过 已过则计算明年的生日             birthday.setFullYear(now.getFullYear() + 1);         &#125;         var timeDec = birthday - now;   //用户生日减当前的日期得到毫秒         var days = timeDec / (24 * 60 * 60 * 1000)         return Math.ceil(days) //向上取整 不足一天为一天     &#125;     console.log(getDaysToBirthday(6, 26));</code></pre></li><li><p>根据系统当前的月份，输出这一个月每一天的星期</p><pre><code>     function print() &#123;         var now = new Date();         var y = now.getFullYear(); //将当前年份赋值给y         // 使用巧妙的方法判断闰平年间接判断月份天数 这里没有调用判断闰平年         // 方法：将得到的当前月加1 然后天数设置为0 这就等于上个月的最后一天 从而得知这个月有多少天         var m = now.getMonth() + 1; //将当前获取到的月份加1并赋值给m         var days = new Date(y, m, 0).getDate();   //含义年为y月为m日为零传给getDate()         // console.log(y, m, days);  //当前结果2021 3 31         for (var i = 1; i &lt;= days; i++) &#123;             // console.log(`$&#123;y&#125;年$&#123;m&#125;月$&#123;i&#125;日:星期$&#123;new Date(y, m - 1, i).getDay()&#125;`);             console.log(`$&#123;y&#125;年$&#123;m&#125;月$&#123;i&#125;日：星期$&#123;getDayOfWeek(y, m, i)&#125;`);         &#125;     &#125;     function getDayOfWeek(year, month, day) &#123;         var d = new Date(year, month - 1, day);         var day = d.getDay(); //得到星期         // 进行匹配         switch (day) &#123;             case 0:                 return &quot;日&quot;;             case 1:                 return &quot;一&quot;;             case 2:                 return &quot;二&quot;;             case 3:                 return &quot;三&quot;;             case 4:                 return &quot;四&quot;;             case 5:                 return &quot;五&quot;;             case 6:                 return &quot;六&quot;;         &#125;     &#125;     print();</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Date </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Date对象方法</title>
      <link href="2021/02/02/blog-js/"/>
      <url>2021/02/02/blog-js/</url>
      
        <content type="html"><![CDATA[<h1 id="Date对象方法"><a href="#Date对象方法" class="headerlink" title="Date对象方法"></a>Date对象方法</h1><pre><code>// 注意月是从0开始的 星期天也是0        var d = new Date();        // 从 Date 对象以四位数字返回年份        console.log(d.getFullYear());        // 从 Date 对象返回月份(0 ~11)         console.log(d.getMonth());        // 从 Date 对象返回一个月中的某一天(1 ~31) 无闰平年判断        console.log(d.getDate());        // 从 Date 对象返回一周中的某一天 (0 ~ 6) 0为星期天        console.log(d.getDay());        // 返回 Date 对象的小时(0 ~23)         console.log(d.getHours());        // 返回 Date 对象的分钟(0 ~59)         console.log(d.getMinutes());        // 返回 Date 对象的秒数(0 ~59)         console.log(d.getSeconds());        // 返回 Date 对象的毫秒(0 ~999)         console.log(d.getMilliseconds());        // 得到时间戳 返回 1970 年 1 月 1 日至今的毫秒数        console.log(d.getTime());</code></pre><h2 id="格林威治时间-UTC"><a href="#格林威治时间-UTC" class="headerlink" title="格林威治时间 UTC"></a>格林威治时间 UTC</h2><pre><code>        // 加UTC表示：格林威治时间 年时分秒 同理        console.log(d.getUTCDate());        console.log(d.getUTCFullYear());        console.log(d.getUTCMonth());</code></pre><h2 id="自定义时间-set"><a href="#自定义时间-set" class="headerlink" title="自定义时间 set"></a>自定义时间 set</h2><pre><code>        var p = new Date();        // 加set表示：设置时间 年时分秒 同理        // console.log(p.setDate(10));  //得到新时间        // console.log(p);        // 设置年份 在此同时也可以设置月和天        // console.log(p.setFullYear(2020, 0, 1));        // console.log(p);        // 设置概览        console.log(p.setFullYear(2020));   //年        console.log(p.setMonth(3)); //月        console.log(p.setDate(4));  //日        console.log(p.setHours(12));  //时        console.log(p.setMinutes(40));  //分        console.log(p.setSeconds(35));    //秒        console.log(p.setMilliseconds(200));    //毫秒        console.log(p);</code></pre><pre><code>        // 把 Date 对象转换为字符串        console.log(p.toString());        // 把 Date 对象的时间部分转换为字符串        console.log(p.toTimeString());        // 把 Date 对象的日期部分转换为字符串        console.log(p.toDateString());        // 根据本地时间格式，把 Date 对象的时间部分转        console.log(p.toLocaleString());        // 根据本地时间格式，把 Date 对象的日期部分转换为字符串        console.log(p.toLocaleDateString());        // 使用 ISO 标准返回字符串的日期格式        console.log(p.toISOString());</code></pre><p><img src="https://i.loli.net/2021/03/02/OjCM1YSFZkN3URc.jpg" alt="IU"></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Date </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>firstBlog</title>
      <link href="2020/02/01/firstBlog/"/>
      <url>2020/02/01/firstBlog/</url>
      
        <content type="html"><![CDATA[<h1 id="抒写第一篇博客"><a href="#抒写第一篇博客" class="headerlink" title="抒写第一篇博客"></a>抒写第一篇博客</h1><h2 id="第一篇Blog的诞生"><a href="#第一篇Blog的诞生" class="headerlink" title="第一篇Blog的诞生:"></a>第一篇Blog的诞生:</h2><p>在只学过小部分web基础上搭建了这个小破站，中途还是有些吃力，太多没有接触的知识、原理，庆幸还可以面向百度面向大佬<br>如果没有这些大佬的解惑和超时空的问答，大概我已经暂时放弃了，待到知识备全在重新开始。<br>最后经过三两天的奋战还是如愿以偿，这一刻无比激动，这一刻让我感受到了编程的多巴胺，这一刻我明白程序员为什么会猝死<br>这一刻我也松了一口气，事实证明我的编程能力也不是很差劲，我能完成或许只是因为付出了比那些大佬多几倍的时间，我只是死磕完成的，换个小白或许也比我快，但至少我实现了。<br>实现了Blog的搭建和部署，从而也学会和理解了很多零散的知识点，对以后或许没有太大作用但不积跬步何以至千里？</p><p><img src="https://i.loli.net/2021/02/17/txgbKumXaOGApSU.jpg"><br><strong>谢同学或许会偶尔怀疑自己的能力，但谢同学永远坚信明天会更好</strong></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Markdow </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
