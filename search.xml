<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo-优化</title>
      <link href="2021/03/09/hexo-note/"/>
      <url>2021/03/09/hexo-note/</url>
      
        <content type="html"><![CDATA[<h2 id="新建文章模板"><a href="#新建文章模板" class="headerlink" title="新建文章模板:"></a>新建文章模板:</h2><pre><code>title: &#123;&#123; title &#125;&#125;  #文章标题date: &#123;&#123; date &#125;&#125;    #文件创建时间author:             #文章作者img: 直接填链接      #文章封面图coverImg:直接填链接  #当本文章在首页轮播时需要显示的图片top: false          #文章是否置顶cover: false        #表示该文章是否需要加入到首页轮播封面中toc: true           #约束mathjax: false      #是否开启数学公式支持password:           #设置阅读文章验证密码 不填写默认没有summary:            #自定义的文章摘要内容 不填写则为文章首内容 categories:         #文章分类 只能写一个tags:               #文章标签 能写多个    -文章标签1    -文章标签2</code></pre><h2 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h2><h3 id="valine评论系统"><a href="#valine评论系统" class="headerlink" title="valine评论系统"></a>valine评论系统</h3><p>Valine 官方文档 <a href="https://valine.js.org/">https://valine.js.org/</a></p><ol><li>注册 LeanCloud </li><li>在LeanCloud中添加应用 添加开发版</li><li>点击设置&gt;应用keys</li><li>复制keys中 appID值和appKey值</li><li>粘贴到主题目录下配置文件中   _config.yml下的valine配置<br>valine:<br>enable: true #true为开启<br>appId: 粘贴对应的值<br>appKey: 粘贴对应的值</li></ol><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><ol><li>安装插件 指令如下<pre><code>npm i -S hexo-prism-plugin</code></pre></li><li>修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并添加代码如下：<pre><code>highlight:enable: false #改为falseline_number: trueauto_detect: falsetab_replace: &quot;&quot;wrap: truehljs: false</code></pre></li></ol><p>prism_plugin:<br>  mode: “preprocess” # realtime/preprocess<br>  theme: “tomorrow”<br>  line_number: false # default false<br>  custom_css:<br>```</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Markdow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog</title>
      <link href="2021/02/17/blog-1/"/>
      <url>2021/02/17/blog-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Markdow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdow的使用</title>
      <link href="2021/02/17/blog-markdow/"/>
      <url>2021/02/17/blog-markdow/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown的使用"><a href="#Markdown的使用" class="headerlink" title="Markdown的使用"></a>Markdown的使用</h1><h2 id="toc-生成目录的方式"><a href="#toc-生成目录的方式" class="headerlink" title="[toc] 生成目录的方式"></a><code>[toc]</code> 生成目录的方式</h2><p>[toc]</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推 # 后面需要一个空格隔开<br><code># 标题内容</code></p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>段落的换行是使用两个以上空格加上回车 </p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><code>*斜体文本*</code><br><em>斜体文本</em></p><p><code>_斜体文本_</code><br><em>斜体文本</em></p><p><code>**粗体文本**</code><br><strong>粗体文本</strong></p><p><code>__粗体文本__</code><br><strong>粗体文本</strong></p><p><code>***粗斜体文本***</code><br><strong><em>粗斜体文本</em></strong></p><p><code>___粗斜体文本___</code><br><strong><em>粗斜体文本</em></strong></p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><p><code>***</code></p><hr><p><code>* * *</code></p><hr><p><code>*****</code></p><hr><p><code>- - -</code></p><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>使用两组英文~~包裹要进行删除的内容</p><p><code>~~ 删除内容 ~~</code><br><del>Markdown</del></p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以使用html中的代码<u></u></p><p><code>&lt;u&gt;Markdown&lt;/u&gt;</code><br><u>Markdown</u></p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p><code>书写格式[^要注明的文本]</code></p><p>Markdown[^test]</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown 支持有序列表和无序列表。</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容</p><p><code>* test1</code><br><code>* test2</code></p><ul><li>test1</li><li>test2</li></ul><p><code>+ test1</code><br><code>+ test2</code></p><ul><li><p>test1</p></li><li><p>test2</p><p><code>- test1</code><br><code>- test2</code></p></li></ul><ul><li>test1</li><li>test2</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表使用数字并加上 . 号来表示，如：<br><code>1. test1</code><br><code>2. test2</code></p><ol><li>test1</li><li>test2</li></ol><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：<br><code>&gt; test1  </code></p><blockquote><p>test1<br>test2</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>使用```代码内容``` 进行包裹代码 并指定一种语言（也可以不指定）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'RUNOOB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>链接使用方法如下：</p><p><code>[链接名称](链接地址) 或者 &lt;链接地址&gt;</code></p><p><a href="https://wwww.baidu.com/">百度</a></p><p><a href="https://wwww.baidu.com/">https://wwww.baidu.com</a></p><h3 id="声明变量在引用链接的方式"><a href="#声明变量在引用链接的方式" class="headerlink" title="声明变量在引用链接的方式"></a>声明变量在引用链接的方式</h3><p><code>[声明变量]:链接地址</code> <code>[变量调用]</code></p><p><a href="https://wwww.baidu.com/">test</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><code>![alt 属性文本](图片地址)</code></p><!-- ![aa](https://i.loli.net/2021/03/15/yu9YzQwGB4iXlv3.jpg) --><p><code>![alt 属性文本](图片地址 &quot;可选标题&quot;)</code></p><!-- ![属性文本](https://i.loli.net/2021/03/15/yu9YzQwGB4iXlv3.jpg "可选标题") --><h3 id="声明变量在引用该图片"><a href="#声明变量在引用该图片" class="headerlink" title="声明变量在引用该图片"></a>声明变量在引用该图片</h3><p>也可以像网址那样对图片网址使用变量<br>[test2]:<a href="https://i.loli.net/2021/03/15/yu9YzQwGB4iXlv3.jpg">https://i.loli.net/2021/03/15/yu9YzQwGB4iXlv3.jpg</a></p><p>[test2]</p><blockquote><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p></blockquote><img src="https://i.loli.net/2021/03/15/yu9YzQwGB4iXlv3.jpg" width="50%"><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><p>语法格式如下：</p><pre><code>|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |</code></pre><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h3 id="表格对齐方式"><a href="#表格对齐方式" class="headerlink" title="表格对齐方式"></a>表格对齐方式</h3><p>我们可以设置表格的对齐方式：</p><p>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐。<br>实例如下：</p><pre><code>| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |</code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h2 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h2><p>支持的 HTML 元素<br>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><p>使用 <code>&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt;</code> 重启电脑<br>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><p><strong>文本加粗</strong><br>** 正常显示星号 **</p><h2 id="数学公式使用-进行包裹"><a href="#数学公式使用-进行包裹" class="headerlink" title="数学公式使用$$$$ 进行包裹"></a>数学公式使用$$$$ 进行包裹</h2><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><ol><li>横向流程图源码格式：<br><code>标记语言为：`mermaid ` </code><pre><code>graph LRA[方形] --&gt;B(圆角) B --&gt; C&#123;条件a&#125; C --&gt;|a=1| D[结果1] C --&gt;|a=2| E[结果2] F[横向流程图 ]</code></pre><pre class=" language-mermaid"><code class="language-mermaid">graph LRA[方形] -->B(圆角) B --> C&#123;条件a&#125; C -->|a=1| D[结果1] C -->|a=2| E[结果2] F[横向流程图 ]</code></pre></li><li>竖向流程图源码格式：<br><code>标记语言为：`mermaid ` </code><pre><code>graph TDA[方形] --&gt; B(圆角) B --&gt; C&#123;条件a&#125; C --&gt; |a=1| D[结果1] C --&gt; |a=2| E[结果2] F[竖向流程图]</code></pre></li></ol><pre class=" language-mermaid"><code class="language-mermaid">graph TDA[方形] --> B(圆角)    B --> C&#123;条件a&#125;    C --> |a=1| D[结果1]    C --> |a=2| E[结果2]    F[竖向流程图]</code></pre><ol start="3"><li>标准流程图源码格式：<br><code>标记语言为：`flow ` </code><pre><code>st=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st-&gt;op-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op</code></pre></li></ol><pre class=" language-flow"><code class="language-flow">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st->op->condcond(yes)->io->econd(no)->sub1(right)->op</code></pre><ol start="4"><li>标准流程图源码格式（横向）：</li></ol><pre class=" language-flow"><code class="language-flow">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st(right)->op(right)->condcond(yes)->io(bottom)->econd(no)->sub1(right)->op</code></pre><ol start="5"><li>UML时序图源码样例：<br><code>标记语言为：`sequence ` </code><pre class=" language-sequence"><code class="language-sequence">对象A->对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B-->对象A: 我很好(响应)对象A->对象B: 你真的好吗？</code></pre></li><li>UML时序图源码复杂样例：</li></ol><pre class=" language-sequence"><code class="language-sequence">Title: 标题：复杂使用对象A->对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B-->对象A: 我很好(响应)对象B->小三: 你好吗小三-->>对象A: 对象B找我了对象A->对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩</code></pre><ol start="7"><li>UML标准时序图样例：<br><code>标记语言为：`mermaid ` </code><pre class=" language-mermaid"><code class="language-mermaid">%% 时序图例子,-> 直线，-->虚线，->>实线箭头sequenceDiagram participant 张三 participant 李四 张三->王五: 王五你好吗？ loop 健康检查     王五->王五: 与疾病战斗 end Note right of 王五: 合理 食物 <br/>看医生... 李四-->>张三: 很好! 王五->李四: 你怎么样? 李四-->王五: 很好!</code></pre></li><li>甘特图样例：</li></ol><pre class=" language-gantt"><code class="language-gantt">dateFormat  YYYY-MM-DD   title 使用mermaid语言定制甘特图section 任务1已完成的任务           :done,    des1, 2014-01-06,2014-01-08正在进行的任务               :active,  des2, 2014-01-09, 3d待完成任务1               :         des3, after des2, 5d待完成任务2              :         des4, after des3, 5dsection 关键任务已完成的关键任务 :crit, done, 2014-01-06,24h已完成的关键任务2         :crit, done, after des1, 2d正在进行的关键任务             :crit, active, 3d待完成的关键任务        :crit, 5d待完成任务           :2d待完成任务2                      :1dsection 文档编写描述甘特图语法               :active, a1, after des1, 3d完成甘特图实例1      :after a1  , 20h完成甘特图实例2    :doc1, after a1  , 48h</code></pre><p><strong>注意：有部分Markdow语法在网页上无法正常显示 ，只适用于笔记中查看</strong></p>]]></content>
      
      
      <categories>
          
          <category> Markdow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Markdow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM补充知识</title>
      <link href="2021/01/25/blog-js-43/"/>
      <url>2021/01/25/blog-js-43/</url>
      
        <content type="html"><![CDATA[<h1 id="元素位置"><a href="#元素位置" class="headerlink" title="元素位置"></a>元素位置</h1><ul><li>offsetParent :获取某个元素第一个定位的祖先元素，如果没有，则得到body</li></ul><p>body的offsetParent为null</p><ul><li>offsetLeft、offsetTop</li></ul><p>相对于该元素的offsetParent的坐标</p><p>如果offsetParent是body，则将其当作是整个网页</p><ul><li>getBoundingClientRect方法</li></ul><p>该方法得到一个对象，该对象记录了该元素相对于视口的距离</p><h1 id="事件模拟"><a href="#事件模拟" class="headerlink" title="事件模拟"></a>事件模拟</h1><ul><li>click</li><li>sumbit</li><li>dispatchEvent</li></ul><h1 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h1><ul><li>window.scrollX、window.pageXOffset、window.scrollY、window.pageYOffset</li></ul><p>window.scrollX、window.pageXOffset: 相当于根元素的scrollLeft</p><p>window.scrollY、window.pageYOffset: 相当于根元素的scrollTop</p><ul><li>scrollTo、scrollBy</li></ul><p>scrollTo: 设置滚动条位置</p><ul><li>resizeTo、resizeBy</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
            <tag> DOM事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM其他事件</title>
      <link href="2021/01/25/blog-js-42/"/>
      <url>2021/01/25/blog-js-42/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM其他事件"><a href="#DOM其他事件" class="headerlink" title="DOM其他事件"></a>DOM其他事件</h1><h2 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h2><ul><li>focus：元素聚焦的时候触发（能与用户发生交互的元素，都可以聚焦），该事件不会冒泡</li><li>blur：元素失去焦点时触发，该事件不会冒泡。</li><li>submit：提交表单事件，仅在form元素有效。</li><li>change：文本改变事件  文本内容改变后触发 一次性触发</li><li>input: 文本改变事件，文本内容改变后触发  即时触发</li></ul><h2 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h2><p>window全局对象</p><ul><li><p>load  加载完毕所有的资源后触发该事件<br>  load 用于给单独的元素添加事件比较好 给整个文档注册该事件 猴年马月都难得到值<br>  window使用load：页面中所有资源全部加载完毕的事件<br>  媒体元素使用load：媒体资源加载完毕的事件    </p></li><li><p>DOMContentLoaded、readystatechange</p><blockquote><p>浏览器渲染页面的过程：</p><ol><li>得到页面源代码</li><li>创建document节点</li><li>从上到下，将元素依次添加到dom树中，每添加一个元素，进行预渲染</li><li>按照结构，依次渲染子节点</li></ol></blockquote></li></ul><blockquote><p>html文档中音频视频图片都是异步加载的 未加载完也会继续执行下面的代码</p></blockquote><p>document的DOMContentLoaded: dom树构建完成后发生</p><p>readystate: loading、interactive、complete</p><p>interactive：触发DOMContentLoaded事件</p><p>complete：触发window的load事件</p><p><strong>js代码应该尽量写到页面底部</strong></p><ul><li>css应该写到页面顶部：避免出现闪烁（如果放到页面底部，会导致元素先没有样式，使用丑陋的默认样式，然后当读到css文件后，重新改变样式）</li><li>JS应该写到页面底部：避免阻塞后续的渲染，也避免运行JS时，得不到页面中的元素。</li></ul><p>大多浏览器不支持 了解即可<br>beforeunload事件: window的事件，关闭窗口时运行，可以阻止关闭窗口<br>unload：window的事件，关闭窗口时运行</p><ul><li><p>scroll事件：窗口发生滚动时运行的事件</p><p>  通过scrollTop和scrollLeft，可以获取和设置滚动距离。</p></li><li><p>resize 窗口尺寸发生改变时运行的事件，监听的是视口尺寸</p></li><li><p>contextmenu 右键菜单事件</p></li><li><p>paste 粘贴事件</p></li><li><p>copy 复制事件</p></li><li><p>cut 剪切事件</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
            <tag> DOM事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM鼠标事件和键盘事件</title>
      <link href="2021/01/25/blog-js-41/"/>
      <url>2021/01/25/blog-js-41/</url>
      
        <content type="html"><![CDATA[<h1 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h1><h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><ul><li><p>click：用户单击主鼠标按钮（一般是左键）或者按下在聚焦时按下回车键时触发</p></li><li><p>dblclick：用户双击主鼠标按键触发（频率取决于系统配置）</p></li><li><p>mousedown：用户按下鼠标任意按键时触发</p></li><li><p>mouseup：用户抬起鼠标任意按键时触发</p></li><li><p>mousemove：鼠标在元素上移动时触发 </p></li><li><p>mouseover：鼠标进入元素时触发 会冒泡</p></li><li><p>mouseout：鼠标离开元素时触发  会冒泡</p></li><li><p>mouseenter：鼠标进入元素时触发，该事件不会冒泡</p></li><li><p>mouseleave：鼠标离开元素时触发，该事件不会冒泡</p></li></ul><p>区别：</p><ul><li>over和out，不考虑子元素，从父元素移动到子元素，对于父元素而言，仍然算作离开</li><li>enter和leave，考虑子元素，子元素仍然是父元素的一部分</li><li>mouseenter和mouseleave不会冒泡</li><li>bubbles -检测是否会冒泡</li></ul><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>所有的鼠标事件，事件处理程序中的事件对象，都为 MouseEvent</p><ul><li>altKey：触发事件时，是否按下了键盘的alt键</li><li>ctrlKey：触发事件时，是否按下了键盘的ctrl键</li><li>shiftKey：触发事件时，是否按下了键盘的shift键</li><li>button：触发事件时，鼠标按键类型<ul><li>0：左键</li><li>1：中键</li><li>2：右键</li></ul></li></ul><p>位置：</p><ul><li>page：pageX、pageY，当前鼠标距离页面的横纵坐标</li><li>client: clientX、clientY，鼠标相对于视口的坐标</li><li>offset：offsetX、offsetY，鼠标相对于事件源的内边距的坐标</li><li>screen: screenX、screenY，鼠标相对于屏幕</li><li>x、y，等同于clientX、clientY</li><li>movement：movementX、movementY，只在鼠标移动事件中有效，相对于上一次鼠标位置，偏移的距离</li></ul><h1 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h1><h2 id="事件类型-1"><a href="#事件类型-1" class="headerlink" title="事件类型"></a>事件类型</h2><ul><li>keydown：按下键盘上任意键触发，如果按住不放，会重复触发此事件</li><li>keypress：按下键盘上一个<strong>字符键</strong>时触发 键盘按键被按下并释放一个键时发生</li><li>keyup：抬起键盘上任意键触发</li></ul><p>KeyDown中返回的是键盘的代码, 而KeyPress返回的是ASCII字符.<br>keydown、keypress 如果阻止了事件默认行为，文本不会显示。</p><h2 id="事件对象-1"><a href="#事件对象-1" class="headerlink" title="事件对象"></a>事件对象</h2><p>KeyboardEvent</p><ul><li>code：得到按键字符串，适配键盘布局。</li><li>key：得到按键字符串，不适配键盘布局。能得到打印字符。</li><li>keyCode、which：得到键盘编码</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
            <tag> DOM事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM事件对象</title>
      <link href="2021/01/25/blog-js-40/"/>
      <url>2021/01/25/blog-js-40/</url>
      
        <content type="html"><![CDATA[<h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><p>事件对象封装了事件的相关信息</p><h2 id="获取事件对象"><a href="#获取事件对象" class="headerlink" title="获取事件对象"></a>获取事件对象</h2><ul><li>通过事件处理函数的参数获取</li><li>旧版本的IE浏览器通过window.event获取</li><li>window.event -获取鼠标事件</li></ul><h2 id="事件对象的通用成员"><a href="#事件对象的通用成员" class="headerlink" title="事件对象的通用成员"></a>事件对象的通用成员</h2><ol><li>target &amp; srcElement * -获取事件目标（事件源）</li></ol><ul><li><p>tagName -获取元素名称<br>  可以用来做事件委托：通过给祖先元素注册事件，在程序处理程序中判断事件源进行不同的处理。</p><p>  通常，事件委托用于动态生成元素的区域。元素内容比较繁杂区域使用较麻烦</p></li></ul><ol start="2"><li>currentTarget * -当前目标：获取绑定事件的元素，等效于this</li></ol><ul><li>type  用于获取当前事件的类型</li></ul><ol start="3"><li><p>preventDefault &amp; returnValue -阻止浏览器默认行为。例如：a元素的链接跳转 button的提交等</p><p> dom2使用preventDefault方法<br> dom0的方式：在事件处理程序中返回false</p><p> 针对a元素，可以设置为功能性链接解决跳转问题</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  </code></pre><p> 针对button元素，可以将button设置为普通的按钮[type=”button”]</p></li><li><p>stopPropagation方法 * -阻止事件冒泡</p></li><li><p>eventPhase -得到事件所处的阶段</p></li></ol><p>结果为：1、2、3<br>1为：事件捕获 阶段<br>2为：事件目标 阶段<br>3为：事件冒泡 阶段</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
            <tag> DOM事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM事件-事件注册中的addEventListener捕获与冒泡</title>
      <link href="2021/01/25/blog-js-39/"/>
      <url>2021/01/25/blog-js-39/</url>
      
        <content type="html"><![CDATA[<h1 id="详解addEventListener-捕获与冒泡"><a href="#详解addEventListener-捕获与冒泡" class="headerlink" title="详解addEventListener() 捕获与冒泡"></a>详解addEventListener() 捕获与冒泡</h1><p><strong>这篇笔记存在未证实的知识待处理（目标阶段的捕获和冒泡是否有用问题）</strong></p><h2 id="addEventListener的三个值"><a href="#addEventListener的三个值" class="headerlink" title="addEventListener的三个值"></a>addEventListener的三个值</h2><blockquote><p>1值 事件名称（事件类型）注意不加on<br>2值 处理函数 可以写多个处理程序<br>3值 使用时true表示在捕获阶段触发 默认为false 为冒泡阶段触发</p></blockquote><h2 id="在最底层（目标阶段）上一层-添加addEventListen的第三个值"><a href="#在最底层（目标阶段）上一层-添加addEventListen的第三个值" class="headerlink" title="在最底层（目标阶段）上一层 添加addEventListen的第三个值"></a>在最底层（目标阶段）上一层 添加addEventListen的第三个值</h2><blockquote><p>以下运行结果为:div捕获&gt;btn1&gt;btn2&gt;btn3&gt;div冒泡<br>如果该div不添加第三个值 运行结果为：btn1&gt;btn2&gt;btn3&gt;div捕获&gt;div冒泡 </p></blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- html代码： --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// js代码：</span><span class="token comment" spellcheck="true">// 得到button并给button注册点击事件 同时写入多个处理事件</span><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处理程序1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//处理程序2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"btn2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//处理程序3</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"btn3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给button父级div注册点击事件 同时写入多个处理事件</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListen</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处理程序4</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"div 捕获"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListen</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处理程序5</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"div 冒泡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><h2 id="当在目标阶段使用捕获和冒泡"><a href="#当在目标阶段使用捕获和冒泡" class="headerlink" title="当在目标阶段使用捕获和冒泡"></a>当在目标阶段使用捕获和冒泡</h2><blockquote><p>运行规则：<br>目标阶段中有处理程序设置为（捕获）true 那么会先运行该处理程序<br>注意1 只会在目标阶段内最前面运行 不会跑到外层（如父级以上）<br>注意2 如果在同一阶段有多个处理程序同设置为（捕获）true 那么会按照注册顺序依次执行<br>以下运行结果为：div捕获&gt;btn2&gt;btn3&gt;btn1&gt;div冒泡   浏览器 google Edge 有效</p></blockquote><blockquote><p>如果不是以上结果那么以上运行规则全作废 火狐 IE浏览器中 目标阶段（最里层）不存在捕获和冒泡 执行规则为注册先后<br>运行结果为：div捕获&gt;btn1&gt;btn2&gt;btn3&gt;div冒泡</p></blockquote><pre class=" language-js"><code class="language-js">btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处理程序1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//处理程序2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"btn2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//处理程序3</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"btn3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListen</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处理程序4</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"div1 捕获"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListen</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处理程序5</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"div2 冒泡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>默认运行规则为 冒泡规则 从里层到外层<br>设为捕获规则时 捕获规则 从外层到里层</li><li>执行多个同一元素事件时，按照注册顺序执行<br>执行不同的元素事件时，按照事件流的顺序执行（默认情况为冒泡）</li><li>阶段之间不会逾越<br>例如：有两个嵌套div 父级为div1子级为div2 两者都设为捕获 即使子级注册在前但最先执行的还是父级<br>该前提是在带有层级关系并同时都设置了捕获的情况下的规则<br>父级未设置捕获下 按照默认情况冒泡规则运行，最先运行的是子级运行完子级内所有的程序才会执行父级</li><li>在目标阶段（最里层）使用冒泡和捕获要看使用的浏览器<br>当前测试结果为：在google、Edge运行可以。 火狐、IE运行目标阶段只按照注册顺序执行 捕获冒泡无效果</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
            <tag> DOM事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM事件-基础概念</title>
      <link href="2021/01/25/blog-js-38/"/>
      <url>2021/01/25/blog-js-38/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM事件-基础概念"><a href="#DOM事件-基础概念" class="headerlink" title="DOM事件-基础概念"></a>DOM事件-基础概念</h1><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li><p>事件：发生一件事</p></li><li><p>事件类型：发生什么事情；点击、鼠标按下、鼠标抬起、鼠标移入、鼠标移出、键盘按下、键盘抬起…</p></li><li><p>事件处理程序：一个函数，当某件事情发生时运行。</p></li><li><p>事件注册：将一个事件处理程序，挂载到某个事件上。</p></li></ul><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>事件流：当某个事件发生的时候，哪些元素会监听到该事件发生，这些元素发生该事件的顺序。<br><img src="https://i.loli.net/2021/03/15/zCTZXKUvgYqyjSA.jpg" alt="事件流"><br><strong>当一个元素发生了某个事件时，那该元素的所有祖先元素都发生了该事件</strong></p><p>微软看法：事件冒泡：先触发最里层的元素，然后再依次触发外层元素<br>网景看法：事件捕获：先触发外层的元素，然后再依次触发里面元素</p><p>目前，标准规定，默认情况下，事件是冒泡的方式触发。</p><p>事件源、事件目标：事件目标阶段的元素（最里层元素）</p><p>事件捕获 从外到内<br>事件冒泡 从内到外</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
            <tag> DOM事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM事件-事件注册</title>
      <link href="2021/01/25/blog-js-37/"/>
      <url>2021/01/25/blog-js-37/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM事件-事件注册"><a href="#DOM事件-事件注册" class="headerlink" title="DOM事件-事件注册"></a>DOM事件-事件注册</h1><p>事件绑定</p><h2 id="dom0版本"><a href="#dom0版本" class="headerlink" title="dom0版本"></a>dom0版本</h2><p>将事件名称前面加上on，作为dom的属性名，给该属性赋值为一个函数，即为事件注册。</p><p>事件移除：重新给事件属性赋值，通常赋值为null和undefined</p><h2 id="dom2版本"><a href="#dom2版本" class="headerlink" title="dom2版本"></a>dom2版本</h2><p>dom对象.addEventListener：注册事件</p><pre><code> addEventListener(&quot;click&quot;,function()&#123; console.log(&quot;1&quot;)&#125;,true/false);</code></pre><blockquote><p>1值 事件名称（事件类型）注意不加on<br>2值 处理函数 可以写多个处理程序<br>3值 使用时表示是否在捕获阶段触发 默认为false 为冒泡阶段触发</p></blockquote><p>与dom0的区别</p><ol><li>dom2可以为某个元素的同一个事件，添加多个处理程序，按照注册的先后顺序运行</li><li>dom2允许开发者控制事件处理的阶段，使用第三个参数，表示是否在捕获阶段触发<ol><li>如果元素是目标元素（事件源），第三个参数无效</li></ol></li></ol><p>事件的移除：dom对象.removeEventListener(事件名, 处理函数);</p><p><strong>dom2中如果要移除事件，不能使用匿名函数</strong></p><p><strong>细节</strong>：<br>了解就行了</p><ol><li>dom2在IE8及以下不兼容，需要使用attachEvent，detachEvent添加和移除事件</li><li>添加和移除事件时，可以将第三个参数写为一个对象，进行相关配置</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
            <tag> DOM事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM事件-基础概念</title>
      <link href="2021/01/25/blog-js-36/"/>
      <url>2021/01/25/blog-js-36/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM事件-基础概念"><a href="#DOM事件-基础概念" class="headerlink" title="DOM事件-基础概念"></a>DOM事件-基础概念</h1><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li><p>事件：发生一件事</p></li><li><p>事件类型：发生什么事情；点击、鼠标按下、鼠标抬起、鼠标移入、鼠标移出、键盘按下、键盘抬起…</p></li><li><p>事件处理程序：一个函数，当某件事情发生时运行。</p></li><li><p>事件注册：将一个事件处理程序，挂载到某个事件上。</p></li></ul><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>事件流：当某个事件发生的时候，哪些元素会监听到该事件发生，这些元素发生该事件的顺序。<br><img src="https://i.loli.net/2021/03/15/zCTZXKUvgYqyjSA.jpg" alt="事件流"><br><strong>当一个元素发生了某个事件时，那该元素的所有祖先元素都发生了该事件</strong></p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>            点击我        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 给button注册点击事件</span>        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给div注册点击事件</span>        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给body注册点击事件</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给html注册点击事件</span>        document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给整个文档注册点击事件</span>        document<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"document"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>以上输出的结果依次为button&gt;div&gt;body&gt;html&gt;document<br>事件流的演示  运行顺序（默认情况下）：冒泡方式触发-从里到外<br>当一个元素发生了某个事件时，那该元素的所有祖先元素都发生了该事件</p><p>微软看法：事件冒泡：先触发最里层的元素，然后再依次触发外层元素<br>网景看法：事件捕获：先触发外层的元素，然后再依次触发里面元素</p><blockquote><p>目前，标准规定，默认情况下，事件是冒泡的方式触发。</p></blockquote><p>事件源、事件目标：事件目标阶段的元素（最里层元素）</p><p><strong>事件捕获 从外到内</strong><br><strong>事件冒泡 从内到外</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
            <tag> DOM事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web Api概述</title>
      <link href="2021/01/20/blog-js-32/"/>
      <url>2021/01/20/blog-js-32/</url>
      
        <content type="html"><![CDATA[<h1 id="web-api概述"><a href="#web-api概述" class="headerlink" title="web api概述"></a>web api概述</h1><p>标准库：ECMAScript中的对象和函数</p><p>Web Api：浏览器宿主环境中的对象和函数</p><ol><li>知识繁杂</li><li>成体系的知识</li><li>程序思维：知识+程序思维 = 应用</li><li>兼容性：了解，不记忆</li></ol><p>Web Api：</p><ul><li>BOM：Browser Object Model，浏览器对象模型</li><li>DOM：Document Object Model，文档对象模型</li></ul><p>BOM：控制浏览器本身<br>DOM：控制HTML文档</p><p>ES 由 ECMAScript 规定的<br>WebApi 由 W3C（万维网联盟） 制定</p><h2 id="关于DOM"><a href="#关于DOM" class="headerlink" title="关于DOM"></a>关于DOM</h2><ul><li>DOM 0</li><li>DOM 1</li><li>DOM 2</li><li>DOM 3</li><li>DOM 4  2015年</li></ul><p><strong>DOM是什么</strong></p><p>DOM的核心理念，是将一个HTML或XML文档，用对象模型表示，每个对象称之为dom对象</p><p>dom对象又称之为节点Node</p><p>节点的类型：</p><ul><li>DocumentType，文档类型节点</li><li>Document，文档节点，表示整个文档</li><li>Comment，注释节点</li><li>Element，元素节点</li><li>Text，文本节点</li><li>Attribute，属性节点</li><li>DocumentFragment，文档片段节点</li></ul><p>dom树：文档中不同的节点形成的树形结构。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
            <tag> Api </tag>
            
            <tag> DOM核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM元素样式</title>
      <link href="2021/01/20/blog-js-35/"/>
      <url>2021/01/20/blog-js-35/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM元素样式"><a href="#DOM元素样式" class="headerlink" title="DOM元素样式"></a>DOM元素样式</h1><h2 id="控制dom元素的类样式"><a href="#控制dom元素的类样式" class="headerlink" title="控制dom元素的类样式"></a>控制dom元素的类样式</h2><blockquote><p>className： 获取或设置元素的类名</p></blockquote><blockquote><p>classList： dom4的新属性，是一个用于控制元素类名的对象 IE10以下不兼容</p></blockquote><ul><li>classList.add：用于添加一个类名</li><li>classList.remove：用于移除一个类名</li><li>classList.contains：用于判断一个类名是否存在 存在某个元素中</li><li>classList.toggle：用于添加/移除一个类名 <pre><code>toggle(类名,false/true) 只写类名时等于循环添加删除（点击1次为删除指定类名，第几第2次指定类名又会重新添加上）写两个值时false为强制删除 true强制添加 ie不支持第二个值谨慎使用toggle第二个值如同true=(classList.add) false=(classList.remove)</code></pre></li></ul><h2 id="获取样式"><a href="#获取样式" class="headerlink" title="获取样式"></a>获取样式</h2><p><strong>CSS的短横线命名，需要转换为小驼峰命名</strong>如下<br>backgroun-color=backgroundColor</p><pre class=" language-js"><code class="language-js">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>dom.style：得到<strong>行内样式</strong>对象</li><li>window.getComputedStyle(dom元素)：得到某个元素最终计算的样式<ul><li>可以有第二个参数，用于得到某个元素的某个伪元素样式</li><li>getComputedStyle(当前对象div, “当前对象的伪元素before/after”)</li></ul></li></ul><h2 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h2><p>dom.style.样式名 = 值</p><p>！注意设置的样式会存放在行内，同时该方式只能设置为行内样式</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
            <tag> DOM核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM元素操作</title>
      <link href="2021/01/20/blog-js-34/"/>
      <url>2021/01/20/blog-js-34/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM元素操作"><a href="#DOM元素操作" class="headerlink" title="DOM元素操作"></a>DOM元素操作</h1><h2 id="初识元素事件"><a href="#初识元素事件" class="headerlink" title="初识元素事件"></a>初识元素事件</h2><p>元素事件：某个元素发生一件事（被点击 click）</p><p>事件处理程序：是一个函数，发生了一件事，应该做什么事情</p><p>注册事件：将事件处理程序与某个事件关联</p><p><strong>this关键字在事件处理程序中指代当前发生的事件元素</strong></p><h2 id="获取和设置元素属性"><a href="#获取和设置元素属性" class="headerlink" title="获取和设置元素属性"></a>获取和设置元素属性</h2><ul><li>通用方式：getAttribute、setAttribute  只能得到原始值  不推荐使用</li></ul><h3 id="可识别属性"><a href="#可识别属性" class="headerlink" title="可识别属性"></a>可识别属性</h3><p>正常的HTML属性  例如：input</p><ul><li>dom对象.属性名：推荐</li></ul><p>细节：</p><ol><li>正常的属性即使没有复制，也有默认值</li><li>布尔属性在dom对象中，得到的是boolean</li><li>某些表单元素可以获取到某些不存在的属性</li><li>某些属性与标识符冲突，此时，需要更换属性名</li></ol><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>HTML5 建议自定义属性使用<code>data-</code>作为前缀</p><p>如果遵从HTML5 自定义属性规范，可以使用<code>dom对象.dataset.属性名</code>控制属性</p><p><strong>删除自定义属性</strong></p><ul><li>removeAttribute(“属性名”);</li><li>delete dom.dataset.属性名</li></ul><h2 id="获取和设置元素内容"><a href="#获取和设置元素内容" class="headerlink" title="获取和设置元素内容"></a>获取和设置元素内容</h2><ul><li>innerHTML：获取和设置元素的内部HTML文本</li><li>innerText：获取和设置元素内部的纯文本，仅得到元素内部显示出来的文本</li><li>textContent：获取和设置元素内部的纯文本，与innerTexttext不同在于 Content得到的是内部源代码中的文本 显示源码格式</li></ul><h2 id="元素结构重构"><a href="#元素结构重构" class="headerlink" title="元素结构重构"></a>元素结构重构</h2><ul><li>父元素.appendChild(元素)：在某个元素末尾加入一个子元素</li><li>父元素.append(元素1,元素2，元素N) 在某个元素末尾加入1或多个元素（还未成为标准慎用）</li><li>父元素.insertBefore(待插入的元素, 哪个元素之前或者节点前)</li><li>父元素.replaceChild(替换的元素, 被替换的元素)</li></ul><p>细节：</p><p>更改元素结构效率较低，尽量少用。</p><h2 id="创建和删除元素"><a href="#创建和删除元素" class="headerlink" title="创建和删除元素"></a>创建和删除元素</h2><h3 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h3><ul><li><p>document.createElement(“元素名”)：创建一个元素对象</p><ul><li>document.createTextNode(“文本”)</li><li>document.createDocumentFragment(): 创建文档片段</li></ul></li><li><p>dom对象.cloneNode(是否深度克隆 true/false)：复制一个新的dom对象并返回</p></li></ul><blockquote><p>childNodes也是实时集合</p></blockquote><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>从子节点列表中删除某个节点</p><ul><li>removeChild：父元素调用，传入子元素</li><li>remove：把自己删除</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
            <tag> DOM核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取DOM节点</title>
      <link href="2021/01/20/blog-js-33/"/>
      <url>2021/01/20/blog-js-33/</url>
      
        <content type="html"><![CDATA[<h1 id="获取DOM节点"><a href="#获取DOM节点" class="headerlink" title="获取DOM节点"></a>获取DOM节点</h1><p>获取dom对象</p><blockquote><p>全局对象 window 中有属性document，代表的是整个文档节点</p></blockquote><h2 id="旧的获取元素节点的方式"><a href="#旧的获取元素节点的方式" class="headerlink" title="旧的获取元素节点的方式"></a>旧的获取元素节点的方式</h2><blockquote><p>DOM 0 版本</p></blockquote><ul><li>document.body：获取body元素节点</li><li>document.head：获取head元素节点</li><li>document.links：获取页面上所有的超链接元素节点，类数组</li><li>document.anchors：获取页面上所有的锚链接(具有name属性)元素节点</li><li>document.forms：获取页面中所有的form元素节点</li></ul><h2 id="新的获取元素节点的方式"><a href="#新的获取元素节点的方式" class="headerlink" title="新的获取元素节点的方式"></a>新的获取元素节点的方式</h2><blockquote><p>consele.dir(document.getElementById(“id”)); 查看对象</p></blockquote><h3 id="通过方法获取"><a href="#通过方法获取" class="headerlink" title="通过方法获取"></a>通过方法获取</h3><ul><li>document.getElementById：通过id获取对应id的元素</li><li>document.getElementsByTagName: 通过元素名称获取元素</li><li>document.getElementsByClassName：通过元素的类样式获取元素，IE9以下无效</li><li>document.getElementsByName：通过元素的name属性值获取元素</li><li>document.querySelector：通过CSS选择器获取元素，得到匹配的第一个，可以选择嵌套的css类名 IE8以下无效 </li><li>document.querySelectorAll：通过CSS选择器获取元素，得到所有匹配的结果，可以选择嵌套的css类名 IE8以下无效</li><li>document.documentElement: 获取根元素</li></ul><p>细节：</p><ol><li>在所有的得到类数组的方法中，除了querySelectorAll，其他的方法都是实时更新的。</li><li>getElementById 得到元素执行效率最高。</li><li>书写了id的元素，会自动成为window对象的属性。它是一个实时的单对象。事实上的标准。不推荐使用。</li><li>getElementsByTagName、getElementsByClassName、querySelector、querySelectorAll，可以作为其他元素节点对象的方法使用</li></ol><h3 id="根据节点关系获取节点"><a href="#根据节点关系获取节点" class="headerlink" title="根据节点关系获取节点"></a>根据节点关系获取节点</h3><blockquote><p>这一块节点只作为了解 </p></blockquote><ul><li><strong>parentNode</strong>：获取父节点（元素、文档）</li><li>previousSibling：获取上一个兄弟节点   （空格注释字符 都为节点）</li><li>nextSibling：获取下一个兄弟节点</li><li>childNodes：获取所有的子节点</li><li>firstChild：获取第一个子节点</li><li>lastChild：获取最后一个子节点</li><li>attributes: 获取某个元素的属性节点</li></ul><blockquote><p>重点使用下面的元素节点<br>获取元素节点</p></blockquote><ul><li>parentElement：获取父元素</li><li>previousElementSibling：获取上一个兄弟元素</li><li>nextElementSibling：获取下一个兄弟元素</li><li>children：获取子元素</li><li>firstElementChild：获取第一个子元素</li><li>lastElementChild：获取最后一个子元素</li></ul><h2 id="获取节点信息"><a href="#获取节点信息" class="headerlink" title="获取节点信息"></a>获取节点信息</h2><ul><li>nodeName：获取节点名称</li><li>nodeValue：获取节点的值</li><li>nodeType：节点类型，是一个数字</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
            <tag> DOM核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Date构造函数</title>
      <link href="2021/01/15/blog-js-30/"/>
      <url>2021/01/15/blog-js-30/</url>
      
        <content type="html"><![CDATA[<h1 id="Date构造函数"><a href="#Date构造函数" class="headerlink" title="Date构造函数"></a>Date构造函数</h1><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ol><li>时间单位</li></ol><p>年（year）<br>月（month）<br>日（date）<br>小时（ho ur）<br>分钟（minute）<br>秒（second）  =  1000ms<br>毫秒（millisecond，ms） = 1000 us<br>微秒（microsecond，us） = 1000 ns<br>纳秒（nanosecond，ns）</p><ol start="2"><li>UTC和GMT</li></ol><p>世界划分为24个时区，北京在东8区，格林威治在0时区。</p><p>GMT：Greenwish Mean Time 格林威治世界时。太阳时，精确到毫秒。<br>UTC：Universal Time Coodinated 世界协调时。以原子时间为计时标准，精确到纳秒。</p><p>UTC和GMT之间误差不超过0.9秒</p><p>GMT+0800  东8区</p><ol start="3"><li>时间戳</li></ol><p>数字</p><p>1970-1-1 凌晨  到 某个时间  所经过的毫秒数</p><h2 id="创建时间对象"><a href="#创建时间对象" class="headerlink" title="创建时间对象"></a>创建时间对象</h2><ul><li>直接调用函数（不适用new），忽略所有参数，直接返回当前时间的字符串。</li><li>new Date(): 创建日期对象</li></ul><ol><li>无参，当前时间</li><li>1个参数，参数为数字，表示传入的是时间戳</li><li>两个参数以上，分别表示：年、月、日、时、分、秒、毫秒</li></ol><p>注意：月份的数字从0开始计算。</p><p>如果缺失参数，日期部分默认为1，时分秒毫秒默认为0。</p><p>月、日、时、分、秒、毫秒，均可以传递负数，如果传递负数，会根据指定日期进行计算。</p><h2 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h2><ul><li><p>getDate方法：得到日期部分</p></li><li><p>getDay方法：得到星期几，0表示星期天</p></li><li><p>getFullYear方法：得到年份</p></li><li><p>getHours方法：得到小时部分</p></li><li><p>getMinutes方法：得到分钟部分</p></li><li><p>getSeconds方法：得到秒部分</p></li><li><p>getMilliseconds方法：得到毫秒部分</p></li><li><p>getTime方法：得到时间戳</p></li><li><p>getMonth方法：得到月，从0开始计算</p></li><li><p>setDate方法：设置日期</p></li><li><p>setMonth方法：设置月份</p></li><li><p>setFullYear方法：设置年</p></li><li><p>setMinutes方法</p></li><li><p>setSeconds方法</p></li><li><p>setMilliseconds方法</p></li><li><p>setTime方法：重新设置时间戳</p></li><li><p>toDateString方法：将日期部分转换为可读的字符串。</p></li><li><p>toISOString方法：将整个对象转换为ISO标准的字符串格式。</p></li><li><p>toLocaleDateString方法：根据当前系统的地区设置，将日期部分转换为可读的字符串</p></li><li><p>toLocaleString方法：根据当前系统的地区设置，将整个日期对象转换为可读的字符串</p></li><li><p>toLocaleTimeString方法：根据当前系统的地区设置，将时间部分转换为可读的字符串</p></li></ul><h2 id="日期的运算"><a href="#日期的运算" class="headerlink" title="日期的运算"></a>日期的运算</h2><p>日期对象重写了Object中的valueOf方法，返回的是一个数字，表示时间戳</p><p>因此，日期对象可以进行数学运算</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript标准库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Math对象</title>
      <link href="2021/01/15/blog-js-29/"/>
      <url>2021/01/15/blog-js-29/</url>
      
        <content type="html"><![CDATA[<h1 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h1><p>提供了一系列与数学相关的成员</p><blockquote><p>常量：永远不会变化的数据。常量一般命名时所有字母大写，如果有多个单词，用下划线分割。</p></blockquote><ul><li>random方法: 产生一个0~1之间的随机数</li><li>PI属性：得到圆周率</li><li>abs方法：求绝对值 Math.abs(-3)结果：3</li><li>floor方法：对一个数向下取整 Math.floor(4.8)结果：4</li><li>ceil方法：对一个数向上取整 Math.ceil(4.1)结果：5</li><li>max方法：得到一组数字的最大值；如果无参，得到-Infinity Math.max(-3,5,6,77)结果：77</li><li>min方法：得到一组数字的最小值；如果无参，得到Infinity</li><li>pow方法：求一个数字的幂次方 Math.pow(2数值,3次方)结果8 含义取2的3次方</li><li>round方法：得到一个四舍五入的整数<br>  Math.round(1.5) 结果:2<br>  Math.round(-1.5) 结果:-1<br>  Math.round(-1.1) 结果:-1<br>  Math.round(-1.9) 结果:-2<br>  <strong>注意</strong><br>  当数值为负数时 负数的四舍五入是根据正无穷方向进行的(轴右侧)</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript标准库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Math对象</title>
      <link href="2021/01/15/blog-js-28/"/>
      <url>2021/01/15/blog-js-28/</url>
      
        <content type="html"><![CDATA[<h1 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h1><p>提供了一系列与数学相关的成员</p><blockquote><p>常量：永远不会变化的数据。常量一般命名时所有字母大写，如果有多个单词，用下划线分割。</p></blockquote><ul><li>random方法: 产生一个0~1之间的随机数</li><li>PI属性：得到圆周率</li><li>abs方法：求绝对值 Math.abs(-3)结果：3</li><li>floor方法：对一个数向下取整 Math.floor(4.8)结果：4</li><li>ceil方法：对一个数向上取整 Math.ceil(4.1)结果：5</li><li>max方法：得到一组数字的最大值；如果无参，得到-Infinity Math.max(-3,5,6,77)结果：77</li><li>min方法：得到一组数字的最小值；如果无参，得到Infinity</li><li>pow方法：求一个数字的幂次方 Math.pow(2数值,3次方)结果8 含义取2的3次方</li><li>round方法：得到一个四舍五入的整数<br>  Math.round(1.5) 结果:2<br>  Math.round(-1.5) 结果:-1<br>  Math.round(-1.1) 结果:-1<br>  Math.round(-1.9) 结果:-2<br>  <strong>注意</strong><br>  当数值为负数时 负数的四舍五入是根据正无穷方向进行的(轴右侧)</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript标准库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-原始类型包装器</title>
      <link href="2021/01/15/blog-js-27/"/>
      <url>2021/01/15/blog-js-27/</url>
      
        <content type="html"><![CDATA[<h1 id="原始类型包装器"><a href="#原始类型包装器" class="headerlink" title="原始类型包装器"></a>原始类型包装器</h1><ul><li>new 包装器(值)：返回的是一个对象</li><li>包装器(值)：返回的是一个原始类型</li></ul><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><ul><li>isNaN：确定传递的值是否是 NaN</li><li>isFinite：确定传递的值类型及本身是否是有限数</li><li>isInteger：判断一个数据是否是整数</li><li>parseFloat: 将一个数据转换为小数</li><li>parseInt：将一个数据转换为整数，直接舍去小数部分</li></ul><p>parseInt、parseFloat要求参数是一个字符串，如果不是字符串，则会先转换为字符串。<br>从字符串开始位置进行查找，找到第一个有效的数字进行转换，如果没有找到，则返回NaN，左右空白字符会忽略</p><p>parseInt，可以传入第二个参数，表示将给定的字符串，识别为多少进制。</p><h3 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h3><ul><li>toFixed方法：会有四舍五入</li><li>toPrecision：以指定的精度返回一个数字字符串</li></ul><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="静态成员-1"><a href="#静态成员-1" class="headerlink" title="静态成员"></a>静态成员</h3><ul><li>fromCharCode：通过unicode编码创建字符串</li></ul><h3 id="实例成员-1"><a href="#实例成员-1" class="headerlink" title="实例成员"></a>实例成员</h3><ul><li>length：字符串长度</li></ul><p>字符串是一个伪数组</p><ul><li>charAt：得到指定位置的字符</li><li>charCodeAt 返回表示给定索引的字符的Unicode的值。</li><li>concat：连接两个字符串文本，并返回一个新的字符串。</li><li>includes：：判断一个字符串里是否包含其他字符串</li><li>endsWith：判断一个字符串的是否以给定字符串结尾，结果返回布尔值。</li><li>startsWith：</li><li>indexOf：从字符串对象中返回首个被发现的给定值的索引值，如果没有找到则返回-1。</li><li>lastIndexOf：从字符串对象中返回最后一个被发现的给定值的索引值，如果没有找到则返回-1。</li><li>padStart：在当前字符串头部填充指定的字符串， 直到达到指定的长度。 返回一个新的字符串。</li><li>padEnd：在当前字符串尾部填充指定的字符串， 直到达到指定的长度。 返回一个新的字符串。</li><li>repeat：返回指定重复次数的由元素组成的字符串对象。</li><li>slice：从某个位置取到某个位置；位置可以是负数；</li><li>substr: 从某个位置开始取，取指定的长度；位置可以是负数；</li><li>substring：从某个位置取到某个位置；不可以是负数；参数位置是可调换的。</li><li>toLowerCase：将字符串转换成小写并返回。</li><li>toUpperCase：将字符串转换成大写并返回。</li><li>split：分割字符串 </li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript标准库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-Array构造器</title>
      <link href="2021/01/15/blog-js-26/"/>
      <url>2021/01/15/blog-js-26/</url>
      
        <content type="html"><![CDATA[<h1 id="Array构造器"><a href="#Array构造器" class="headerlink" title="Array构造器"></a>Array构造器</h1><p>凡是通过Array构造函数创建的对象，都是数组</p><h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><ul><li>from方法：可以将一个伪数组转换为真数组</li><li>isArray方法：判断一个给定的数据，是否为一个真数组</li><li>of方法：类似于中括号创建数组，依次赋予数组每一项的值</li></ul><h2 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h2><ul><li>fill方法：用某个数据填充数组</li><li>pop：删除数组的最后一个元素，并返回这个元素。</li><li>push：在数组的末尾增加一个或多个元素，并返回数组的新长度。</li><li>reverse：将当前数组颠倒顺序</li><li>shift：删除数组的第一个元素，并返回这个元素。</li><li>sort：对数组元素进行排序，并返回当前数组。</li><li>splice：在任意的位置给数组添加或删除任意个元素。</li><li>unshift：在数组的开头增加一个或多个元素，并返回数组的新长度。</li></ul><p>纯函数、无副作用函数：不会导致当前对象发生改变</p><ul><li>concat：返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。</li><li>includes: 数组中是否包含满足条件的元素</li><li>join：连接所有数组元素组成一个字符串。</li><li>slice：抽取当前数组中的一段元素组合成一个新数组。</li><li>indexOf：返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。</li><li>lastIndexOf：返回数组中最后一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。</li><li>forEach: 遍历数组</li><li>every：是否所有元素都满足条件</li><li>some：是否至少有一个元素满足条件</li><li>filter：过滤，得到满足条件的元素组成的新数组</li><li>find: 查找第一个满足条件的元素，返回元素本身，如果没有找到，返回undefined</li><li>findIndex: 查找第一个满足条件的元素，返回元素的下标</li><li>map：映射，将数组的每一项映射称为另外一项</li><li>reduce：统计，累计</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript标准库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-function和Object</title>
      <link href="2021/01/15/blog-js-25/"/>
      <url>2021/01/15/blog-js-25/</url>
      
        <content type="html"><![CDATA[<h1 id="标准库（标准API）"><a href="#标准库（标准API）" class="headerlink" title="标准库（标准API）"></a>标准库（标准API）</h1><ul><li>库：liberary</li><li>API：应用程序编程接口，Application Programing Interface</li><li>标准：ECMAScript标准</li></ul><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><ul><li>keys(某个对象)，得到某个对象的所有属性名数组</li><li>values(某个对象)，得到某个对象的所有属性值数组</li><li>entries(某个对象)，得到某个对象的所有属性名和属性值的数组</li></ul><h3 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h3><blockquote><p>实例成员可以被重写</p></blockquote><p><strong>所有对象，都拥有Object的所有实例成员</strong></p><ul><li><p>toString方法：得到某个对象的字符串格式 默认情况下，该方法返回”[object Object]”;</p></li><li><p>valueOf方法：得到某个对象的值 默认情况下，返回该对象本身</p></li></ul><blockquote><p>在JS中，当自动的进行类型转换时，如果要对一个对象进行转换，实际上是先调用对象的valueOf方法，然后调用返回结果的toString方法，将得到的结果进行进一步转换。</p></blockquote><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p><strong>所有函数都具有Function中的实例成员</strong></p><p><strong>语法：arguments：在函数中使用，获取该函数调用时，传递的所有参数</strong></p><p><strong>arguments是一个类数组（也称为伪数组：没有通过Array构造函数创建的类似于数组结构的对象），伪数组会缺少大量的数组实例方法</strong></p><p><strong>arguments数组中的值，会与对应的形参映射</strong></p><h3 id="实例成员-1"><a href="#实例成员-1" class="headerlink" title="实例成员"></a>实例成员</h3><ul><li>length属性，得到函数形参数量</li><li>apply方法：调用函数，同时指定函数中的this指向，参数以数组传递</li><li>call方法：调用函数，同时指定函数中的this指向，参数以列表传递</li><li>bind方法：得到一个新函数，该函数中的this始终指向指定的值。</li></ul><p>通常，可以利用apply、call方法和slice，将某个伪数组转换伪真数组。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript标准库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RegExp正则表达式</title>
      <link href="2021/01/15/blog-js-31/"/>
      <url>2021/01/15/blog-js-31/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式是国际标准，跨越语言</p><p>正则表达式是一个规则，用于验证字符串。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol><li>字面量匹配</li></ol><p>规则中直接书写字面量字符</p><ol start="2"><li><p>特殊字符</p><pre><code>.   匹配除换行符 \n 之外的所有单字符。要匹配 . ，请使用 \. ...a... 释义 匹配a前和a后都必须要有3个字符的</code></pre></li></ol><p>^   匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。<br>^abc… 释义 匹配输入字符串的开始位置为abc且后面接有3个字符 注意只匹配开始位置的其他位置匹配不成功</p><p>$   匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。<br>^abc…&amp; 释义：匹配输入字符串的开始位置为abc且后面接有3个字符后就结束 （限定为6位数，多一位就不在匹配）</p><p>? 匹配前面的一次或者0次</p><pre><code>3. 转义符</code></pre><p>\n  匹配一个换行符<br>\r  匹配一个回车符<br>\t  匹配一个制表符<br>\s  匹配一个空白字符<br>\S  匹配一个除空白字符以外的所有字符<br>\b  匹配一个字符串的边界 （字符串开始和结束都是边界 空格 换行 制表符都是边界）<br>\B  非单词边界匹配<br>\d  匹配一个数字字符 [0~9] 例：^1\d\d\d\d\d\d\d\d\d\d$ 以1开头的十一位数的号码<br>\D  匹配一非个数字字符<br>\w  匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’<br>\W  匹配非字母、数字、下划线。<br>\u  Unicode 字符转换匹配 \u4f60\u771f\u68d2=你真棒 </p><pre><code>4. 字符集</code></pre><p>[字符范围]  分别匹配字符范围内的一个字符<br>[^0-9] 释义：匹配除0到9之间以外的字符 =\D*<br>匹配所有字符：<br>    [\d\D]+ 释义：匹配所有数字字符和非数字字符 至少1个<br>    [\s\S]+</p><pre><code>[a-z] [a-zA-Z] [0-9] [A-Za-z0-9_]范围可以随意组合匹配中文： ```[\u4e00-\u9FA5]``` 汉字unicode编码范围5. 量词**指定是（前面）的规则出现的次数** 量词前最近的</code></pre><p>单纯匹配本身时例如 + 时需要在其前面 加一个 \ 其他符号同理</p><ul><li>  匹配前面的子表达式零次或多次</li></ul><ul><li>  至少匹配一个或者多个 例：\d+ 释义：至少匹配到一个数字<br>?   匹配零个或者1个<br>{n}: 匹配n个<br>{n,}: 匹配&gt;=n个<br>{n,m}: 匹配n-m个<pre><code></code></pre>例1：匹配6-16位的密码   ^[0-9a-zA-Z]{6,16}$ 释义：匹配范围[0到9 a到z A到Z]6到16位数的字符<br>例2: 匹配2到6位的中文名字 ^[\u4e00-\u9FA5]{2,6}$<pre><code></code></pre></li></ul><ol start="6"><li>或者<br>多个规则之间，适用或者 <code>|</code>,表示多个规则任选其一</li></ol><h2 id="JS中的应用"><a href="#JS中的应用" class="headerlink" title="JS中的应用"></a>JS中的应用</h2><p>js中，正则表达式表现为一个对象，该对象是通过构造函数RegExp</p><h3 id="创建正则对象"><a href="#创建正则对象" class="headerlink" title="创建正则对象"></a>创建正则对象</h3><ol><li>字面量模式<br><code>var reg1 = /^-?\d+(\.0+)?$/;</code></li><li>构造函数模式<br> <code> var reg2 = new RegExp(&quot;^-?\d+(\.0+)?$&quot;)</code></li><li>直接调用<br> <code>RegExp(&quot;^-?\d+(\.0+)?$&quot;);</code><br> <strong>注意构造函数模式和直接调用是两种不同的创建方式区别：当二者不是直接书写的正则 而是调用的正则构造函数创建的是一个新地址，而直接调用的使用的还是原来的地址</strong></li></ol><h3 id="参数-这三者默认是关闭的"><a href="#参数-这三者默认是关闭的" class="headerlink" title="参数 这三者默认是关闭的"></a>参数 这三者默认是关闭的</h3><p><strong>开启.书写位置正则后面 //g、i、m</strong><br>g 全局匹配 找到所有匹配的<br>i 忽略大小写<br>m 多行匹配 匹配每一行的开始和结束(^和$)</p><h3 id="正则实例成员"><a href="#正则实例成员" class="headerlink" title="正则实例成员"></a>正则实例成员</h3><ul><li><p>global        是否开启了全局搜索 只读属性</p></li><li><p>ignoreCase    是否开启了忽略了大小写</p></li><li><p>multiline     是否开启了多行匹配</p></li><li><p>source        目前规则 得到当前正则字符串</p></li><li><p>test方法：验证某个字符串是否满足规则<br> test()函数 判断一个字符串是否匹配 并且在全局匹配模式下影响下一次匹配的位置<br> 结论：开启了全局匹配情况下 第一次匹配成功后索引号会停留在上一次匹配成功的字符上<br> 当连续进行下一次匹配时会从上一次匹配成功结束的索引开始匹配后面的字符，<br> 后面没有可匹配的那就判断为false 在下一次匹配时 重头开始匹配。<br> 没开启全局匹配不会记录索引每次都是重新匹配并只匹配一个.</p></li><li><p>exec方法：execute，执行匹配，得到匹配结果。</p></li></ul><blockquote><p>正则表达式，默认情况下，适用贪婪模式<br>在量词后，加上?，表示进入非贪婪模式（把？当为量词时含义是匹配0次或1次 把？写于量词后表示非贪婪模式）</p></blockquote><h3 id="字符串对象中的正则方法"><a href="#字符串对象中的正则方法" class="headerlink" title="字符串对象中的正则方法"></a>字符串对象中的正则方法</h3><ul><li>split 用于把一个字符串分割成字符串数组 第二个参数设定分割数量，默认全分割</li><li>replace 替换与正则表达式匹配的字符 参数一为正则表达式 参数二为替换数据同时也可以写函数</li><li>search 在给定字符串中搜索匹配项，并返回在字符串中找到字符的索引号永远是只找第一匹配的，全局非全局下作用相同</li><li>match 对给定字符串执行匹配并返回匹配结果</li></ul><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a>捕获组</h3><p>(1): 用小括号包裹的部分叫做捕获组，捕获组会出现在匹配结果中 每一个小括号为一个捕获组 嵌套根据实际情况看<br>    在正则表达式中，使用某个捕获组，使用方法：<code>\捕获组编号</code></p><p>(2):捕获组可以命名，叫做具名捕获组(命名捕获组) <code>在小括号中前面写入 ?&lt;命名&gt;</code></p><pre><code> var p = &quot;2020-6-26,2020-5-1,2020-11-2,2020-11-15&quot;;        var regs = /(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;1,2&#125;)-(?&lt;day&gt;\d&#123;1,2&#125;)/g;        while (result = regs.exec(p)) &#123;            // console.log(result);            // 0--是整个捕获组       捕获组1       捕获组2     捕获组3            console.log(result.groups);            console.log(result[0], result.groups.year, result.groups.month, result.groups.day);        &#125;        // 下面为输出释义        /*            0: &quot;2ah&quot;   这里是所有匹配值            1: &quot;2a&quot;    这里是小括号捕获组            groups:     记录命名的捕获组 叫做 (具名捕获组)        */        </code></pre><p>(3):非捕获组  捕获组是默认是开启的 会占用资源浪费执行效率 关闭捕获方法：在小括号中前面写入 ?:</p><pre><code>        // var p = &quot;2020-6-26,2020-5-1,2020-11-2,2020-11-15&quot;;        // // 年不会被捕获了 只会匹配输出        // var regs = /(?:\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;1,2&#125;)-(?&lt;day&gt;\d&#123;1,2&#125;)/g;        // while (result = regs.exec(p)) &#123;        //     // 0--是整个捕获组       捕获组1       捕获组2     捕获组3        //     console.log(result[0], result.groups.year, result.groups.month, result.groups.day);        //     console.log(result.groups);        // &#125;</code></pre><p><strong>了解</strong></p><pre><code> // 方法replace()--替换 也可以使用捕获组 例题：把一个日期中的横杠换成斜杠 但两个日期间的符号不改变         var p = &quot;2020-6-26,-2020-5-1,2020-11-2,-2020-11-15&quot;;        var regs = /(\d&#123;4&#125;)-(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)/g;        //   方法1.   function 1值匹配结果,后面的值表示捕获组        // p = p.replace(regs, function (match, g1, g2, g3) &#123;        //     console.log(match, g1, g2, g3);        //             //     return `$&#123;g1&#125;/$&#123;g2&#125;/$&#123;g3&#125;`        // &#125;);        // 方法2. 使用特殊符号 /$1 表示捕获组1 $1前后添加数据为替换值        p = p.replace(regs, &quot;/$1/$2/$3&quot;);        console.log(p);</code></pre><h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><p>释义：重复正则匹配上一次的匹配结果满足该要求才为匹配项</p><pre><code>//例题： var reg = /(\d&#123;2&#125;)\1/; //释义： 匹配两个数字并重复一次的        var s = &quot;1212&quot;;        var s2 = &quot;1213&quot;        console.log(reg.test(s));  //true        // console.log(reg.test(s2));  //false</code></pre><h3 id="正向断言-预查"><a href="#正向断言-预查" class="headerlink" title="正向断言(预查)"></a>正向断言(预查)</h3><p>检查某个字符后面的字符是否满足某个规则，该规则不成为匹配结果，并且不称为捕获组</p><h3 id="负向断言-预查"><a href="#负向断言-预查" class="headerlink" title="负向断言(预查)"></a>负向断言(预查)</h3><p>检查某个字符后面的字符是否不满足某个规则，该规则不成为匹配结果，并且不称为捕获组</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript标准库 </tag>
            
            <tag> RegExp正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-递归</title>
      <link href="2021/01/12/blog-js-24/"/>
      <url>2021/01/12/blog-js-24/</url>
      
        <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>函数直接或间接调用自身</p><p>避免无限递归，无限递归会导致执行栈溢出。</p><p>对比死循环</p><ul><li>死循环不会报错，也不会导致栈溢出</li><li>无限递归会导致栈溢出</li></ul><h2 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h2><p>任何代码的执行都必须有一个执行环境，执行环境为代码的执行提供支持</p><p>执行环境是放到执行栈中的。</p><p>每个函数的调用，都需要创建一个函数的执行环境，函数调用结束，执行环境销毁。</p><p>执行栈有相对固定的大小，如果执行环境太多，执行栈无法容纳，会报错</p><h2 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h2><p>如果一个函数最后一条语句是调用函数，并且调用函数不是表达式的一部分，则该语句称为尾调用，如果尾调用是调用自身函数，则称为尾递归。</p><p>某些语言或执行环境会对尾调用进行优化，它们会理解销毁当前函数，避免执行栈空间被占用。</p><p>在浏览器执行环境中，尾调用没有优化。但在nodejs环境中有优化。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-函数的本质</title>
      <link href="2021/01/12/blog-js-23/"/>
      <url>2021/01/12/blog-js-23/</url>
      
        <content type="html"><![CDATA[<h1 id="函数的本质"><a href="#函数的本质" class="headerlink" title="函数的本质"></a>函数的本质</h1><p>函数的本质就是对象。</p><blockquote><p>某些教程中，将构造函数称之为构造器<br>所有的对象都是通过关键字new出来的，<code>new 构造函数()</code></p></blockquote><p>所有的函数，都是通过<code>new Function</code>创建。</p><blockquote><p>Function</p></blockquote><p>由于函数本身就是对象，因此函数中，可以拥有各种属性。</p><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>JS为了增强原始类型的功能，为boolean、string、number分别创建了一个构造函数：</p><ol><li>Boolean</li><li>String</li><li>Number</li></ol><p>如果语法上，将原始类型当作对象使用时（一般是在使用属性时），JS会自动在该位置利用对应的构造函数，创建对象来访问原始类型的属性。</p><blockquote><p>类：在JS中，可以认为，类就是构造函数</p></blockquote><blockquote><p>成员属性（方法）、实例属性（方法）：表示该属性是通过构造函数创建的对象调用的。<br>静态属性（方法）、类属性（方法）：表示该属性是通过构造函数本身调用的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-构造函数</title>
      <link href="2021/01/12/blog-js-22/"/>
      <url>2021/01/12/blog-js-22/</url>
      
        <content type="html"><![CDATA[<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><blockquote><p>对象中的属性，如果是一个函数，也称该属性为对象的方法</p></blockquote><h2 id="用于创建对象的函数"><a href="#用于创建对象的函数" class="headerlink" title="用于创建对象的函数"></a>用于创建对象的函数</h2><p>用函数创建对象，可以减少繁琐的对象创建流程</p><ol><li>函数返回一个对象</li><li>构造函数：构造函数专门用于创建对象</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token function">函数名</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果使用上面的格式创建对象，则该函数叫做构造函数。</p><ol><li>函数名使用大驼峰命名法</li><li>构造函数内部，会自动创建一个新对象，this指向新创建的对象，并且自动返回新对象</li><li>构造函数中如果出现返回值，如果返回的是原始类型，则直接忽略；如果返回的是引用类型，则使用返回的结果</li><li>所有的对象，最终都是通过构造函数创建的</li></ol><h2 id="new-target"><a href="#new-target" class="headerlink" title="new.target"></a>new.target</h2><p>该表达式在函数中使用，返回的是当前的构造函数，但是，如果该函数不是通过new调用的，则返回undefined</p><p>通常用于判断某个函数是否是通过new在调用。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-函数表达式和this</title>
      <link href="2021/01/12/blog-js-21/"/>
      <url>2021/01/12/blog-js-21/</url>
      
        <content type="html"><![CDATA[<h1 id="函数表达式和this"><a href="#函数表达式和this" class="headerlink" title="函数表达式和this"></a>函数表达式和this</h1><h2 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h2><p>JS中，函数也是一个数据，语法上，函数可以用于任何需要数据的地方</p><p>JS中，函数是一等公民</p><p>函数是一个引用类型，将其赋值给某个变量时，变量中保存的是函数的地址</p><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><blockquote><p>this无法赋值</p></blockquote><ol><li>在全局作用域中，this关键字固定指向全局对象。</li><li>在函数作用域中，取决于函数是如何被调用的<ol><li>函数直接调用，this指向全局对象</li><li>通过一个对象的属性调用，格式为<code>对象.属性()</code>或<code>对象[&quot;属性&quot;]()</code>，this指向对象</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-作用域和闭包</title>
      <link href="2021/01/12/blog-js-20/"/>
      <url>2021/01/12/blog-js-20/</url>
      
        <content type="html"><![CDATA[<h1 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域表示一个代码区域，也表示一个运行环境</p><p>JS中，有两种作用域：</p><ol><li>全局作用域</li></ol><p>直接在脚本中书写的代码</p><p>在全局作用域中声明的变量，会被提升到脚本块的顶部，并且会成为全局对象的属性。</p><ol start="2"><li>函数作用域</li></ol><p>函数中的代码</p><p>在函数作用域中声明的变量，会被提升到函数的顶部，并且不会成为全局对象的属性.</p><p><strong>因此，函数中声明的变量不会导致全局对象的污染</strong></p><p><strong>尽量的把功能封装在函数中</strong></p><p>但是，当函数成为一个表达式时，它既不会提升，也不会污染全局对象。</p><p>将函数变为一个函数表达式的方式之一，将函数用小括号括起来。</p><p>然而，这样一来，函数无法通过名称调用。</p><p>如果书写一个函数表达式，然后将立即调用，该函数称之为立即执行函数 IIFE（Imdiately Invoked Function Expression）。</p><p>由于大部分情况下，函数表达式的函数名没有实际意义，因此，可以省略函数名。</p><p>没有名字的函数，称之为匿名函数</p><h2 id="作用域中可以使用的变量"><a href="#作用域中可以使用的变量" class="headerlink" title="作用域中可以使用的变量"></a>作用域中可以使用的变量</h2><p>全局作用域只能使用全局作用域中声明的变量（包括函数）</p><p>函数作用域不仅能使用自身作用域中声明的变量（包括函数），还能使用外部环境的变量（包括函数）</p><p>有的时候，某个函数比较复杂，在编写的过程，可能需要另外一些函数来辅助它完成一些功能，而这些函数仅仅会被该函数使用，不会在其他位置使用，则可以将这些函数声明到该函数的内部。</p><p>函数内部声明的变量和外部冲突时，使用内部的。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包（closure），是一种现象，内部函数，可以使用外部函数环境中的变量。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-函数语法</title>
      <link href="2021/01/12/blog-js-19/"/>
      <url>2021/01/12/blog-js-19/</url>
      
        <content type="html"><![CDATA[<h1 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h1><p>重复代码：让程序难以维护 ,函数主要用于减少重复代码</p><h2 id="创建（定义、声明）函数"><a href="#创建（定义、声明）函数" class="headerlink" title="创建（定义、声明）函数"></a>创建（定义、声明）函数</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 函数体</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>函数体的代码不会直接运行，必须要手动调用函数，才能运行其中的代码。</p><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>运行函数体</p><pre class=" language-js"><code class="language-js"><span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h2><p>通过字面量声明的函数，会提升到(当前)脚本块的顶部。</p><p>通过字面量声明的函数，会成为全局对象的属性。</p><h2 id="其他特点"><a href="#其他特点" class="headerlink" title="其他特点"></a>其他特点</h2><p>通过typeof 函数名，得到的结果是”function”</p><p>函数内部声明的变量：</p><ol><li>如果不使用var声明，和全局变量一致，表示给全局对象添加属性</li><li>如果使用var声明，变量提升到所在函数的顶部，函数外部不可以使用该变量</li></ol><p><strong>函数中声明的变量，仅能在函数中使用，在外部无效</strong></p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>参数表示函数运行的未知条件，需要调用者告知的数据</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 参数的有效返回在函数体中</span><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">函数名</span><span class="token punctuation">(</span>实参<span class="token punctuation">)</span></code></pre><p>如果实参没有传递，则对应的形参为undefined</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>函数运行后，得到的结果，调用函数时，调用表达式的值就是函数的返回值</p><p>return 会直接结束整个函数的运行</p><p>return 后面如果不跟任何数据，返回undefined</p><p>如果函数中没有书写return，则该函数会在末尾自动return undefined。</p><h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * **/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-数组</title>
      <link href="2021/01/10/blog-js-18/"/>
      <url>2021/01/10/blog-js-18/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li>数组用于存放多个数据</li></ul><h2 id="创建一个数组"><a href="#创建一个数组" class="headerlink" title="创建一个数组"></a>创建一个数组</h2><ol><li>new Array(长度)</li></ol><p>长度，数组里面的数据总数，长度一定是一个非负整数</p><p>new Array(数据, 数据, 数据….)</p><p>创建一个数组，并初始化其每一项的值</p><p>数组项：数组其中的一项数据</p><ol start="2"><li>[数据,数据,数据,….]</li></ol><p>创建一个数据，并初始化其每一项的值</p><h2 id="认识数组的本质"><a href="#认识数组的本质" class="headerlink" title="认识数组的本质"></a>认识数组的本质</h2><p>数组的本质是一个对象</p><ul><li>length属性：数组的长度，会自动变化，值为最大下标+1</li><li>数字字符串属性：叫做下标，也叫做索引，相当于数组中每个数据的编号，下标从0开始排列</li></ul><p>连续下标的取值范围：0 ~ length -1，如果给length直接赋值，会导致数组可能被截断</p><p>实际开发中，不要给length赋值。</p><h2 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h2><p>通常情况下，下标是连续的。</p><p>下标不连续的数组，叫做稀松数组。</p><h2 id="数组的常见操作"><a href="#数组的常见操作" class="headerlink" title="数组的常见操作"></a>数组的常见操作</h2><h3 id="添加数组项"><a href="#添加数组项" class="headerlink" title="添加数组项"></a>添加数组项</h3><ul><li>数组[长度] = 数据：向数组末尾添加一个数据</li><li>数组.push(数据): 向数组末尾添加一个数据</li><li>数组.unshift(数据)：向数组起始位置添加一个数据，会导致数组每一项的下标向后移动</li><li>数组.splice(下标, 0, 添加的数据1，数据N): 从指定下标位置开始，删除0个，然后在该位置插入添加的数据，如果下标超过范围，则按照范围的边界进行处理。</li></ul><p>push、unshift、splice可以添加多个数据</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">443</span><span class="token punctuation">,</span> <span class="token number">3453</span><span class="token punctuation">,</span> <span class="token number">34443</span><span class="token punctuation">,</span> <span class="token number">343</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 1.</span>        <span class="token comment" spellcheck="true">// arr[5] = 888;</span>        <span class="token comment" spellcheck="true">// arr[arr.length] = 999; //在末尾添加</span>        <span class="token comment" spellcheck="true">// 2.</span>        <span class="token comment" spellcheck="true">// arr.push(1234);  //在末尾添加</span>        <span class="token comment" spellcheck="true">// 3.</span>        <span class="token comment" spellcheck="true">// arr.unshift(4321);  //在数组起始位置添加一个数据 后面的数据下标依次往后移</span>        <span class="token comment" spellcheck="true">// arr.push();  arr.unshift(); 这两个函数都可以同时添加多个数据</span>        <span class="token comment" spellcheck="true">// arr.push(12, 13, 14);</span>        <span class="token comment" spellcheck="true">// arr.unshift(22, 33, 44);</span>        <span class="token comment" spellcheck="true">// 4.</span>        arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token string">'222'</span><span class="token punctuation">,</span> <span class="token number">333</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//结果：443, 3453,111,'222', 333 , 343, 11</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><ul><li>delete 数组[下标]: 这种做法不会导致数组其他的属性发生变化，因此，该做法会导致产生稀松数组，所以不推荐使用该做法。</li><li>数组.pop(): 删除数组的最后一项，该表达式返回最后一项的数据</li><li>数组.shift()：删除数组第一项，该表达式返回第一项的数据</li><li>数组.splice(下标, 删除的数量, 添加的数据): 从指定下标位置开始，删除指定数量，然后在该位置插入添加的数据，如果下标超过范围，则按照范围的边界进行处理。返回一个新数组，该数组记录被删除的数据。</li></ul><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 1.delete 不会导致其他属性发生变化 因此 该做法会导致产生稀松数组 所以不推荐使用</span>        <span class="token comment" spellcheck="true">// delete arr[3];</span>        <span class="token comment" spellcheck="true">// 2.直接删除 只能指定单个删</span>        <span class="token comment" spellcheck="true">// arr.pop(3);</span>        <span class="token comment" spellcheck="true">// 可以接收到被删除的值</span>        <span class="token comment" spellcheck="true">/* var n = arr.pop(3)        console.log(n); */</span>        <span class="token comment" spellcheck="true">// 3.删除首个数据 每次删除都是删除首个</span>        <span class="token comment" spellcheck="true">// arr.shift();</span>        <span class="token comment" spellcheck="true">// 接收被删除的值</span>        <span class="token comment" spellcheck="true">/*  var m = arr.shift()         console.log(m);*/</span>        <span class="token comment" spellcheck="true">// 4.arr.splice(下标, 删除个数);</span>        <span class="token comment" spellcheck="true">// 从下标开始位置删除 包括下标起始位置</span>        <span class="token comment" spellcheck="true">// arr.splice(0, 2);</span>        <span class="token comment" spellcheck="true">// 接收被删除的数据</span>        <span class="token comment" spellcheck="true">/*  var i = arr.splice(2, 2);         console.log(i); */</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><ul><li>数组.slice(起始位置下标, 结束位置下标)：将起始位置到结束位置之间的数据拿出来，得到一个新的数组，该函数不会改变原数组；注意：结束下标取不到 只能取到指定结束下标的前一位</li></ul><p>下标可以写负数，如果是负数，则从数组的末尾开始计算。</p><p>如果不写结束下标，则直接取到末尾。</p><ul><li>数组清空</li></ul><p>方法1：数组.splice(0, 数组.length);  数组.splice(下标, 删除个数);</p><p>方法2：数组.length = 0;  把数组length长度设置为0</p><ul><li>查找数组中某一项的下标</li></ul><p>数组.indexOf(数据)</p><p>从数组中依次查找对应的数据，查找时使用严格相等进行比较。找到第一个匹配的下标，返回。如果没有找到，则得到-1；</p><p>数组.lastIndexOf(数据)</p><p>功能和indexOf类似，只是查找的是最后一个匹配的下标</p><ul><li>数组.fill</li></ul><p>数组.fill(数据)：将数组的所有项，填充为指定的数据</p><p>数组.fill(数组, 开始下标): 将数组从开始下标起，到数组的末尾，填充为指定的数据</p><p>数组.fill(数组, 开始下标，结束下标): 将数组从开始下标起，到数组的结束下标（取不到），填充为指定的数据</p><h2 id="语法补充"><a href="#语法补充" class="headerlink" title="语法补充"></a>语法补充</h2><h3 id="in关键字"><a href="#in关键字" class="headerlink" title="in关键字"></a>in关键字</h3><p>判断某个属性在对象中是否存在</p><p>属性名 in 对象</p><h3 id="for-in-foreach-循环"><a href="#for-in-foreach-循环" class="headerlink" title="for-in  foreach 循环"></a>for-in  foreach 循环</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> 对象<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//循环体</span>    <span class="token comment" spellcheck="true">// 取出对象的所有属性名，每次循环将其中一个属性名赋值给变量prop，运行循环体。</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 得到下标后获取下标的数据</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> index <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript流程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-循环</title>
      <link href="2021/01/10/blog-js-17/"/>
      <url>2021/01/10/blog-js-17/</url>
      
        <content type="html"><![CDATA[<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><ul><li><p>重复的运行一段代码</p></li><li><p>JS支持3种循环结构：while循环、do-while循环、for循环</p></li></ul><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><pre class=" language-js"><code class="language-js">    <span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        代码块（循环体）    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-mermaid"><code class="language-mermaid">graph TDst((开始))-->条件&#123;条件&#125;条件--true-->代码块代码块-->条件条件--false-->ed((结束))</code></pre><p>死循环：条件永远满足，永远无法退出循环。</p><blockquote><p>demo</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// while循环 </span>    <span class="token comment" spellcheck="true">// 当不满足条件时退出循环 否则继续执行</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       </code></pre><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h2><pre class=" language-js"><code class="language-js">    <span class="token keyword">do</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        循环体    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-mermaid"><code class="language-mermaid">graph TDst((开始))-->代码块代码块-->条件&#123;条件&#125;条件--true-->代码块条件--false-->ed((结束))</code></pre><blockquote><p>demo</p></blockquote><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// do while 循环</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先执行一次在进行判断</span>    <span class="token keyword">do</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>while 和do while循环最大的区别在于:</strong></p><ul><li><p>while可能一次都不运行(开始就不满足条件) do while无论满不满足条件都会执行一次</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2></li></ul><pre class=" language-js"><code class="language-js">    <span class="token keyword">for</span><span class="token punctuation">(</span>初始化表达式<span class="token punctuation">;</span> 条件<span class="token punctuation">;</span> 条件改变表达式<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        循环体    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-mermaid"><code class="language-mermaid">graph TDst((开始))-->初始化表达式初始化表达式-->条件&#123;条件&#125;条件--true-->循环体循环体-->条件改变表达式条件改变表达式-->条件条件--false-->ed((结束))</code></pre><blockquote><p>demo</p></blockquote><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 输出1~100中的奇数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="循环中的关键字-循环控制语句"><a href="#循环中的关键字-循环控制语句" class="headerlink" title="循环中的关键字 -循环控制语句"></a>循环中的关键字 -循环控制语句</h2><ol><li><p>break; 跳出当前循环</p><blockquote><p>demo</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 结果 2,0</span>     <span class="token comment" spellcheck="true">// 第一层循环不满足条件后才退出循环  第二层循环满足或不满足退出循环后还是要执行第一层循环</span>     <span class="token comment" spellcheck="true">// 第二层循环每次都是清零再次进行循环</span></code></pre></li><li><p>continue; 停止当前循环体，进入下一次循环。</p></li></ol><blockquote><p>demo</p></blockquote><pre class=" language-js"><code class="language-js"> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最终结果 2,2 </span>        <span class="token comment" spellcheck="true">// 如果没有限制会一直死循环下去 依次输出结果后再次去运行</span>       </code></pre><blockquote><p>demo 输出99乘法表</p></blockquote><pre class=" language-js"><code class="language-js"> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                str <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`$&amp;#123;j&amp;#125;*$&amp;#123;i&amp;#125;=$&amp;#123;j * i&amp;#125;\t`</span></span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出结果如下：</span><span class="token comment" spellcheck="true">// 1*1=1</span><span class="token comment" spellcheck="true">// 1*2=2    2*2=4</span><span class="token comment" spellcheck="true">// 1*3=3    2*3=6    3*3=9</span><span class="token comment" spellcheck="true">// 1*4=4    2*4=8    3*4=12    4*4=16</span><span class="token comment" spellcheck="true">// 1*5=5    2*5=10   3*5=15    4*5=20    5*5=25</span><span class="token comment" spellcheck="true">// 1*6=6    2*6=12   3*6=18    4*6=24    5*6=30    6*6=36</span><span class="token comment" spellcheck="true">// 1*7=7    2*7=14   3*7=21    4*7=28    5*7=35    6*7=42    7*7=49</span><span class="token comment" spellcheck="true">// 1*8=8    2*8=16   3*8=24    4*8=32    5*8=40    6*8=48    7*8=56    8*8=64</span><span class="token comment" spellcheck="true">// 1*9=9    2*9=18   3*9=27    4*9=36    5*9=45    6*9=54    7*9=63    8*9=72    9*9=81</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript流程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-switch 开关</title>
      <link href="2021/01/10/blog-js-16/"/>
      <url>2021/01/10/blog-js-16/</url>
      
        <content type="html"><![CDATA[<h1 id="switch-开关"><a href="#switch-开关" class="headerlink" title="switch 开关"></a>switch 开关</h1><p>switch的语法始终可以使用if结构替代。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 数据<span class="token number">1</span><span class="token punctuation">:</span>        代码块    <span class="token keyword">case</span> 数据<span class="token number">2</span><span class="token punctuation">:</span>        代码块    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        代码块<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol><li><p>计算表达式的返回值，依次和case后面的数据进行严格相等的比较，如果某个相等，停止比较，然后运行其内部的代码块，再然后，依次运行之后的所有代码块。</p></li><li><p>在case分支内部，使用break语句，可以立即停止switch结构。</p></li><li><p>default表示前面的所有case都不匹配时运行。可以省略</p><blockquote><p>demo</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token operator">+</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">switch</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">20</span><span class="token punctuation">:</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">30</span><span class="token punctuation">:</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">default</span><span class="token punctuation">:</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript流程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-if判断</title>
      <link href="2021/01/10/blog-js-15/"/>
      <url>2021/01/10/blog-js-15/</url>
      
        <content type="html"><![CDATA[<h1 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 代码块</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 代码块</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 代码块</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//....</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 以上条件都不满足执行的代码块</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol><li>如果某个条件满足，则直接忽略后面的所有条件</li><li>else if 可以是0个或多个</li><li>else可以有1个或0个</li><li>else可以换行，可以不换行</li><li>如果代码块只有一条语句，可以省略花括号（不推荐）</li><li>一个if代表一个判断<blockquote><p>demo</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ！x不会报错原因：变量提升 所以此时！x为undefined =false然后！取反为true</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 给他赋值为0 </span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 此时 x=0</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">++</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//不满足后直接运行下面的else if 但是此时 x值已经改变了 x=1</span>         <span class="token keyword">var</span> x<span class="token punctuation">;</span>         x<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>x <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         x<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//运行此处后x=3</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         x<span class="token operator">--</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//结果 3</span></code></pre></li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ol><li>得到一个随机数</li></ol><p>Math.random() 该表达式返回一个0~1之间的随机数字（无法取到1）</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript流程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript运算符补充知识</title>
      <link href="2021/01/05/blog-js-14/"/>
      <url>2021/01/05/blog-js-14/</url>
      
        <content type="html"><![CDATA[<h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>使用模板字符串可以让代码更简洁 不用使用+号进行拼接 ``模板字符中 &amp;{里面写js表达式}</p><pre><code> console.log(`我叫$&#123;user.name&#125;，今年$&#123;user.age&#125;岁了，性别是$&#123;user.gender&#125;，目前$&#123;user.age &gt;= 18 ? &quot;已成年&quot; : &quot;未成年&quot;&#125;`);</code></pre><h2 id="类型转换不会影响原本的数据"><a href="#类型转换不会影响原本的数据" class="headerlink" title="类型转换不会影响原本的数据"></a>类型转换不会影响原本的数据</h2><pre><code>var x =&#39;1&#39;;var y =x+2;console.log(x ,typeof x);结果：1 string</code></pre><h2 id="复合的赋值运算符"><a href="#复合的赋值运算符" class="headerlink" title="复合的赋值运算符"></a>复合的赋值运算符</h2><p>+=  -=  /=  *=  %=  **=<br>如下</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    x <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等同于 x = x + 3;</span>    x <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等同于 x = x * (1 + 2);</span>    x <span class="token operator">*</span><span class="token operator">=</span> x<span class="token operator">++</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等同于 x = x * (x++ + 2);</span></code></pre><h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><p>写法：表达式1, 表达式2</p><p>依次运行两个表达式，返回表达式2</p><p>逗号运算符的优先级比赋值更低</p><blockquote><p>详解逗号运算符</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">++</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token operator">++</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token operator">++</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注意： 每个表达式的赋值会被记录 </span>    <span class="token comment" spellcheck="true">// 输出结果为6</span></code></pre><h2 id="void-运算符"><a href="#void-运算符" class="headerlink" title="void 运算符"></a>void 运算符</h2><p>一元运算符</p><p>写法：</p><ol><li>普通写法： <code>void 表达式 </code></li><li>函数写法： <code>void(表达式) </code></li></ol><p>运行表达式，然后返回undefined</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结果:undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 结果:undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果:undefined </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 结果:NaN  原因：void 1 优先级比较高所以先执行得到 undefined转数字=NaN+2   所有数和NaN相加都等于NaN</span></code></pre><h2 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h2><p>一元运算符</p><p>写法：</p><ol><li>普通写法： <code>typeof 表达式 </code></li><li>函数写法： <code>typeof(表达式) </code><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果：number2 原因 因为typeof优先级比较高所以先执行了typeof 1=number +2=number2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果：number</span></code></pre>typeof运算，返回表达式的类型，是一个字符串。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript三目运算符</title>
      <link href="2021/01/05/blog-js-13/"/>
      <url>2021/01/05/blog-js-13/</url>
      
        <content type="html"><![CDATA[<h1 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h1><p>书写方式： 表达式1 ? 表达式2 : 表达式3</p><ol><li>对表达式1进行boolean判定</li><li>如果判定结果为真，返回表达式2；否则，返回表达式3。</li></ol><blockquote><p>案例详解 1</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//判断year是否是闰年 得到该年二月是几天？</span><span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span><span class="token keyword">var</span> isLeap <span class="token operator">=</span> year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// isLeap 为true 输出 29天 为false 输出28天</span><span class="token keyword">var</span> days <span class="token operator">=</span> isLeap <span class="token operator">?</span> <span class="token number">29</span> <span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"二月的天数为："</span> <span class="token operator">+</span> days<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>案例详解 2</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 最终输出的x值为多少？</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>x <span class="token operator">=</span> x<span class="token operator">++</span> <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">?</span> x<span class="token operator">++</span> <span class="token operator">*</span> x<span class="token operator">++</span> <span class="token punctuation">:</span> <span class="token operator">++</span>x <span class="token operator">*</span> <span class="token operator">++</span>x<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意： 表达式1 的赋值会被记录</span><span class="token comment" spellcheck="true">//结果为：6</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript逻辑运算符</title>
      <link href="2021/01/05/blog-js-12/"/>
      <url>2021/01/05/blog-js-12/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><p>布尔运算符</p><h2 id="与（并且）"><a href="#与（并且）" class="headerlink" title="与（并且）"></a>与（并且）</h2><p>符号：&amp;&amp;</p><p>书写方式： 表达式1 &amp;&amp; 表达式2</p><ol><li>将表达式1 进行 boolean 判定</li></ol><p>以下数据均判定为false：</p><ol><li>null</li><li>undefined</li><li>false</li><li>NaN</li><li>‘’</li><li>0</li></ol><p>其他数据全部为真</p><ol start="2"><li>短路规则: 如果表达式1的判定结果为假，则直接返回表达式1，而不执行表达式2；否则，返回表达式2的结果。</li></ol><h2 id="或"><a href="#或" class="headerlink" title="或"></a>或</h2><p>符号：||</p><p>写法：表达式1 || 表达式2</p><ol><li><p>将表达式1 进行 boolean 判定</p></li><li><p>短路规则:  如果表达式1为真，直接返回表达式1，不运行表达式2；否则，返回表达式2</p></li></ol><h2 id="非"><a href="#非" class="headerlink" title="非"></a>非</h2><p>符号：!</p><p>写法: !数据</p><p>一元运算符</p><p>将数据的boolean判定结果直接取反，非运算符一定返回boolean类型。</p><blockquote><p>&amp;&amp; 和 || 的短路规则:</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断2000是否是闰年</span><span class="token keyword">var</span> isLeap <span class="token operator">=</span> year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isLeap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果是闰年返回true 否则返回false</span><span class="token comment" spellcheck="true">// 根据 &amp;&amp; 和 || 的短路规则：</span>isLeap <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">29</span> <span class="token operator">+</span> <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当 isLeap为true时 表达式1不执行 执行表达式2   反之执行式1</span>isLeap <span class="token operator">||</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">28</span> <span class="token operator">+</span> <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当 isLeap为false时 表达式1不执行 执行表达式2   反之执达式1</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript比较运算符</title>
      <link href="2021/01/05/blog-js-11/"/>
      <url>2021/01/05/blog-js-11/</url>
      
        <content type="html"><![CDATA[<h1 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h1><p>大小比较：&gt;   &lt;    &gt;=    &lt;=<br>相等比较：<br><code>==</code>   相等<br><code>!= </code>  不相等<br><code>===</code>  严格相等<br><code>!==</code>  严格不相等</p><p><strong>比较运算符的返回类型：boolean</strong></p><p><strong>算术运算符的优先级高于比较运算符</strong></p><h2 id="大小比较"><a href="#大小比较" class="headerlink" title="大小比较"></a>大小比较</h2><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li><p>两个字符串比较大小， 比较的是字符串的字符编码。</p></li><li><p>如果一个不是字符串，并且两个都是原始类型，将它们都转换为数字进行比较</p></li></ol><p>‘1’ -&gt; 1<br>‘’ -&gt; 0<br>‘   ‘ -&gt; 0<br>‘  a’ -&gt; NaN<br>‘3.14’ -&gt; 3.14</p><p>NaN与任何数字比较，得到的结果都是false</p><p>Infinity比任何数字都大</p><p>-Infinity比任何数字都小</p><ol start="3"><li>如果其中一个是对象，将对象转换为原始类型然后，按照规则1或规则2进行比较</li></ol><p>目前，对象转换为原始类型后，是字符串 “[object Object]”</p><h2 id="相等比较"><a href="#相等比较" class="headerlink" title="相等比较"></a>相等比较</h2><h3 id="和-相等比较-和-不相等比较"><a href="#和-相等比较-和-不相等比较" class="headerlink" title="== 和 != (相等比较 和 不相等比较)"></a>== 和 != (相等比较 和 不相等比较)</h3><p>==: 比较两个数据是否相等<br>!=: 比较两个数据是否不相等</p><p><strong>细节</strong></p><ol><li><p>两端的类型相同，直接比较两个数据本身是否相同（两个对象比较的地址）</p></li><li><p>两端的类型不同</p></li></ol><p>1). null 和 undefined， 它们之间相等， 和其他原始类型比较， 则不相等。<br>2). 其他原始类型，比较时先转换为数字，再进行比较<br>3). NaN与任何数字比较，都是false，包括自身<br>4). Infinity和-Infinity，只能和自身相等<br>5). 对象比较时，要先转换为原始类型后，再进行比较</p><p><strong>由于相等和不相等比较，对于不同类型的数据比较违反直觉，因此，通常我们不适用这种比较方式，而是使用更加接近直觉的严格相等和严格不相等比较</strong></p><h3 id="和-（严格相等-和-严格不相等）"><a href="#和-（严格相等-和-严格不相等）" class="headerlink" title="=== 和 !== （严格相等 和 严格不相等）"></a>=== 和 !== （严格相等 和 严格不相等）</h3><p>=== ： 两端的数据和类型必须相同<br>!== ： 两端的数据或类型不相同</p><ol><li>两端类型相同，规则和相等比较一致。</li><li>两端类型不同，为false。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript自增和自减</title>
      <link href="2021/01/05/blog-js-10/"/>
      <url>2021/01/05/blog-js-10/</url>
      
        <content type="html"><![CDATA[<h1 id="自增和自减"><a href="#自增和自减" class="headerlink" title="自增和自减"></a>自增和自减</h1><h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><p>一元运算符</p><p>++：将某个变量的值自增1</p><p>–：将某个变量的值自减1</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><h3 id="自增自减表达式"><a href="#自增自减表达式" class="headerlink" title="自增自减表达式"></a>自增自减表达式</h3><p>x++: 将变量x自增1，得到的表达式的值是自增之前的值。<br>++x: 将变量x自增1，得到的表达式的值是自增之后的值。<br>x–: 将变量x自减1，得到的表达式的值是自减之前的值。<br>–x: 将变量x自减1，得到的表达式的值是自减之后的值。</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>从高到底依次是：</p><ol><li><code>++ --</code></li><li><code>* / %</code></li><li><code>+ -</code></li></ol><p>优先级的运算细节：</p><ol><li>从左到右依次查看</li><li>如果遇到操作数，将数据的值直接取出</li><li>如果遇到相邻的两个运算符，并且左边的运算符优先级大于等于右边的运算符，则直接运行左边的运算符。</li></ol><h4 id="通过以下代码掌握自增自减"><a href="#通过以下代码掌握自增自减" class="headerlink" title="通过以下代码掌握自增自减"></a>通过以下代码掌握自增自减</h4><pre class=" language-js"><code class="language-js">        <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> y <span class="token operator">=</span> x <span class="token operator">+</span> x<span class="token operator">++</span> <span class="token operator">*</span> <span class="token operator">++</span>x<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//       1+1*3         </span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果：4</span>        <span class="token keyword">var</span> q <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> p <span class="token operator">=</span> q <span class="token operator">+</span> <span class="token operator">++</span>q <span class="token operator">*</span> <span class="token operator">++</span>q <span class="token operator">+</span> q<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1+2*3+3 最后一个q在最后所以后面赋值</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结果：10</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>a <span class="token operator">+</span> a<span class="token operator">++</span> <span class="token operator">*</span> <span class="token operator">++</span>a <span class="token operator">+</span> <span class="token operator">++</span>a<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1+3+3*5+6</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 25</span>        <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> k <span class="token operator">=</span> j <span class="token operator">+</span> j<span class="token operator">++</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> j <span class="token operator">+</span> j<span class="token operator">++</span> <span class="token operator">*</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//      1+1*(j=2+2*4)+10     </span>        <span class="token comment" spellcheck="true">// 不能用数学计算的逻辑运算，先从左运算遇到小括号才算括号 小括号内为赋值表达式 所以最后一个x为10</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript算术运算符</title>
      <link href="2021/01/05/blog-js-9/"/>
      <url>2021/01/05/blog-js-9/</url>
      
        <content type="html"><![CDATA[<h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><p>数学运算符</p><ol><li><code>+ - * /</code></li><li><code>+ -</code></li><li><code>%</code>  取余</li><li><code>++ --</code>  加加 减减</li><li><code>**</code> 幂</li></ol><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><ol><li><p>数字运算是不精确的</p></li><li><p>除数为0</p></li></ol><p>如果被除数是正数，得到结果 Infinity （正无穷）<br>如果被除数是负数，得到结果 -Infinity （负无穷）<br>如果被除数是0，得到结果 NaN （Not a Number，非数字）</p><blockquote><p>typeof函数, 返回数据类型<br>isNaN函数，该函数用于判断一个数据是否是NaN，返回boolean &gt;true、false<br>isFinite函数，该函数用于判断一个数据是否是有限的，返回boolean</p></blockquote><ol start="3"><li>求余（求模）</li></ol><p>% ：余数的符号，与被除数相同。</p><h2 id="其他类型使用算术运算"><a href="#其他类型使用算术运算" class="headerlink" title="其他类型使用算术运算"></a>其他类型使用算术运算</h2><ol><li>除加号之外的算术运算符</li></ol><p>将原始类型转换为数字类型（自动完成转换），然后进行运算。</p><ul><li>boolean： true = 1, false = 0</li><li>string: 如果字符串内部是一个正确的数字，直接变为数字，如果是一个非数字，则得到NaN（能识别Infinity，不能把字符串内部的东西当作表达式），如果字符串是一个空字符串（没有任何内容），转换为0. 字符串转换时，会忽略前后空格。<blockquote><p>NaN虽然是数字，但它和任何数字作任何运算，得到的结果都是NaN</p></blockquote></li></ul><p>+null 结果：0<br>-null 结果：-0 （历史遗留问题）<br>undefined * 5 结果：NaN<br>null * 5 结果：0</p><ul><li>null：null -&gt; 0</li><li>undefined: undefined -&gt; NaN</li></ul><p>将对象类型先转换为字符串类型，然后再将该字符串转换为数字类型</p><p>对象类型 -&gt; “[object Object]” -&gt; NaN</p><p>{} * 5 系统报错<br>({} * 5) 结果：NaN</p><ol start="2"><li>加号运算符</li></ol><ul><li>加号一边有字符串，含义变为字符串拼接</li></ul><p>将另一边的其他类型，转换为字符串</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符概述</title>
      <link href="2021/01/05/blog-js-8/"/>
      <url>2021/01/05/blog-js-8/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符概述"><a href="#运算符概述" class="headerlink" title="运算符概述"></a>运算符概述</h1><h2 id="操作符和操作数"><a href="#操作符和操作数" class="headerlink" title="操作符和操作数"></a>操作符和操作数</h2><p>操作符：运算符，参与运算的符号</p><p>操作数：参与运算的数据，也称之为“元”</p><p>操作符不一定只有一个符号</p><p>操作符出现在不同的位置，可能具有不同的含义</p><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1.2</span><span class="token punctuation">;</span></code></pre><p>部分操作符：</p><ol><li><code>=</code>：赋值符号，将右边的数据赋值给左边</li><li><code>.</code>: 访问符号，用于访问对象的属性</li><li><code>[]</code>：访问符号，用于访问对象的属性</li><li><code>()</code>：函数调用</li></ol><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>按操作数数量区分：</p><ol><li>一元（目）运算符：()  .  []</li><li>二元（目）运算符: +  -  / * % = </li><li>三元（目）运算符: ?:</li></ol><p>功能区分：</p><ol><li>算术运算符（数学）</li><li>比较运算符</li><li>逻辑运算符</li><li>位运算符</li><li>其他</li></ol><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>表达式 = 操作符 + 操作数</p><p>每个表达式都有一个运算结果，该结果叫做<strong>返回值</strong>，返回值的类型叫做<strong>返回类型</strong></p><p>所有的表达式都可以当作数据使用。</p><p>部分运算符的返回值和类型</p><ol><li><code>=</code>：该表达式，返回赋值的结果</li><li><code>.</code>：属性访问表达式，返回的是属性的值</li><li><code>[]</code>：属性访问表达式，返回的是属性的值</li><li><code>()</code>：函数调用表达式，返回的结果取决于函数的运行</li><li>如果是一个声明+赋值的表达式，返回结果为undefined。</li></ol><p>console.log函数调用的返回结果为undefined</p><blockquote><p>chrome浏览器控制台的环境是REPL环境<br>REPL：Read Eval Print Loop，读-执行-打印-循环<br>当直接在控制台书写代码时，除了运行代码之外，还会输出该表达式的返回值</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引用类型</title>
      <link href="2021/01/02/blog-js-7/"/>
      <url>2021/01/02/blog-js-7/</url>
      
        <content type="html"><![CDATA[<h1 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h1><p>原始类型 引用类型（对象、函数）</p><p><strong>原始类型的变量，存放的具体的值</strong></p><p><strong>引用类型的变量，存放的是内存地址</strong></p><p><strong>凡是出现对象字面量的位置，都一定在内存出现一个新的对象</strong></p><h2 id="通过以下代码更好了解引用类型"><a href="#通过以下代码更好了解引用类型" class="headerlink" title="通过以下代码更好了解引用类型"></a>通过以下代码更好了解引用类型</h2><ol><li><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// obj1 指向 对象</span>     <span class="token comment" spellcheck="true">// 创建对象会开辟一个新的内存空间</span>     <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         name<span class="token punctuation">:</span> <span class="token string">"123"</span>         <span class="token comment" spellcheck="true">//出现对象字面量的位置 会新开辟一块内存空间，用于存放对象的内容</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//把obj1赋值给obj2 同时是把指向对象的地址也赋值给了obj2  此时obj1和obj2 指向同一个对象 共用了对象的地址</span>     <span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>     obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"456"</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 输出结果为 456 456</span></code></pre></li><li><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         name<span class="token punctuation">:</span> <span class="token string">"123"</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>     obj2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         name<span class="token punctuation">:</span> <span class="token string">"456"</span><span class="token punctuation">,</span>         age<span class="token punctuation">:</span> <span class="token number">18</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 输出结果为123 456 原因:新建的对象开辟了新的内存空间 并同时将同名的对象覆盖了 所以两个name地址是不同的</span></code></pre></li><li><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> user1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         name<span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>         address<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             country<span class="token punctuation">:</span> <span class="token string">"中国"</span><span class="token punctuation">,</span>             city<span class="token punctuation">:</span> <span class="token string">"南昌"</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> user2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         name<span class="token punctuation">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>         address<span class="token punctuation">:</span> user1<span class="token punctuation">.</span>address     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>     user2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"王五"</span><span class="token punctuation">;</span>     user2<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token string">"丰城"</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> user2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 结果：张三 李四</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">,</span> user2<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 结果：丰城 丰城</span>     <span class="token comment" spellcheck="true">// 原因：每创建一个对象字面量 就会新开辟一块内存空间 user2里面的address引用的是user1中的address,所以两者使用了同一个地址 所以user2.address.city改变值会跟随改变</span></code></pre><blockquote><p>扩展知识：JS中的垃圾回收<br>垃圾回收器，会定期的发现内存中无法访问到的对象，该对象称之为垃圾，垃圾回收器会在合适的时间将其占用的内存释放。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript语法基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引用类型</title>
      <link href="2021/01/02/blog-js-6/"/>
      <url>2021/01/02/blog-js-6/</url>
      
        <content type="html"><![CDATA[<h1 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h1><p>原始类型 引用类型（对象、函数）</p><p><strong>原始类型的变量，存放的具体的值</strong></p><p><strong>引用类型的变量，存放的是内存地址</strong></p><p><strong>凡是出现对象字面量的位置，都一定在内存出现一个新的对象</strong></p><h2 id="通过以下代码更好了解引用类型"><a href="#通过以下代码更好了解引用类型" class="headerlink" title="通过以下代码更好了解引用类型"></a>通过以下代码更好了解引用类型</h2><ol><li><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// obj1 指向 对象</span>     <span class="token comment" spellcheck="true">// 创建对象会开辟一个新的内存空间</span>     <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         name<span class="token punctuation">:</span> <span class="token string">"123"</span>         <span class="token comment" spellcheck="true">//出现对象字面量的位置 会新开辟一块内存空间，用于存放对象的内容</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//把obj1赋值给obj2 同时是把指向对象的地址也赋值给了obj2  此时obj1和obj2 指向同一个对象 共用了对象的地址</span>     <span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>     obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"456"</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 输出结果为 456 456</span></code></pre></li><li><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         name<span class="token punctuation">:</span> <span class="token string">"123"</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>     obj2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         name<span class="token punctuation">:</span> <span class="token string">"456"</span><span class="token punctuation">,</span>         age<span class="token punctuation">:</span> <span class="token number">18</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 输出结果为123 456 原因:新建的对象开辟了新的内存空间 并同时将同名的对象覆盖了 所以两个name地址是不同的</span></code></pre></li><li><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> user1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         name<span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>         address<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             country<span class="token punctuation">:</span> <span class="token string">"中国"</span><span class="token punctuation">,</span>             city<span class="token punctuation">:</span> <span class="token string">"南昌"</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>     <span class="token keyword">var</span> user2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         name<span class="token punctuation">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>         address<span class="token punctuation">:</span> user1<span class="token punctuation">.</span>address     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>     user2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"王五"</span><span class="token punctuation">;</span>     user2<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token string">"丰城"</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> user2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 结果：张三 李四</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">,</span> user2<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 结果：丰城 丰城</span>     <span class="token comment" spellcheck="true">// 原因：每创建一个对象字面量 就会新开辟一块内存空间 user2里面的address引用的是user1中的address,所以两者使用了同一个地址 所以user2.address.city改变值会跟随改变</span></code></pre><blockquote><p>扩展知识：JS中的垃圾回收<br>垃圾回收器，会定期的发现内存中无法访问到的对象，该对象称之为垃圾，垃圾回收器会在合适的时间将其占用的内存释放。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript语法基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量和对象</title>
      <link href="2021/01/02/blog-js-5/"/>
      <url>2021/01/02/blog-js-5/</url>
      
        <content type="html"><![CDATA[<h1 id="变量和对象"><a href="#变量和对象" class="headerlink" title="变量和对象"></a>变量和对象</h1><p>原始类型：number、string、boolean、null、undefined</p><p>引用类型：object、function 函数</p><h2 id="在变量中存放对象"><a href="#在变量中存放对象" class="headerlink" title="在变量中存放对象"></a>在变量中存放对象</h2><ol><li>通过变量，读取对象中的某个属性</li></ol><pre class=" language-js"><code class="language-js">变量名<span class="token punctuation">.</span>属性名</code></pre><p><strong>当读取的属性不存在时，会得到undefined</strong></p><p><strong>当读取属性的对象不存在（undefined 或 null）时，程序报错</strong></p><ol start="2"><li>通过变量，更改对象中的某个属性</li></ol><p><strong>当赋值的属性不存在时，会添加属性</strong></p><ol start="3"><li>删除属性和添加属性</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//添加</span>变量名<span class="token punctuation">.</span>属性名<span class="token operator">=</span><span class="token string">"属性值"</span><span class="token comment" spellcheck="true">// 删除</span><span class="token keyword">delete</span> 变量名<span class="token punctuation">.</span>属性名<span class="token punctuation">;</span></code></pre><ol start="4"><li>属性表达式</li></ol><p>给属性赋值，或读取属性时，可以使用下面的格式操作</p><pre class=" language-js"><code class="language-js">对象变量<span class="token punctuation">[</span><span class="token string">"属性名"</span><span class="token punctuation">]</span></code></pre><ul><li>某些属性名中包含特殊字符</li></ul><p>实际上，JS对属性名的命名要求并不严格，属性可以是任何形式的名字</p><p><strong>属性的名字只能是字符串，如果你书写的是数字，会自动转换为字符串</strong></p><h2 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h2><p>JS大部分的宿主环境，都会提供一个特殊的对象，该对象可以直接在JS代码中访问，该对象叫做全局对象</p><p>在浏览器环境中，全局对象为window，表示整个窗口</p><p>全局对象中的所有属性，可以直接使用，而不需要写上全局对象名。</p><p><strong>开发者定义的所有变量，实际上，会成为window对象的属性。</strong></p><p><strong>如果变量没有被赋值，则该变量不会覆盖window对象上的同名属性。</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 测试题</span>        <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        obj2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>        obj2<span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"234"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 问以下输出的值是多少？</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 234 234  因为两个值是一样的</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript语法基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的变量</title>
      <link href="2021/01/02/blog-js-4/"/>
      <url>2021/01/02/blog-js-4/</url>
      
        <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h2><p>变量是一块内存空间，用于保存数据</p><blockquote><p>计算机的存储了解即可:<br>计算机：CPU、内存、硬盘、输入输出设备<br>内存：存取速度快，数据易丢失<br>硬盘：存取速度慢，数据永久保存<br>计算机程序的运行，仅与内存打交道</p></blockquote><h2 id="如何使用变量"><a href="#如何使用变量" class="headerlink" title="如何使用变量"></a>如何使用变量</h2><ol><li>声明（定义）变量</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> 变量名<span class="token punctuation">;</span></code></pre><p><strong>变量声明后，它的值为undefined</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> user<span class="token punctuation">;</span></code></pre><ol start="2"><li>给变量赋值</li></ol><p>向变量的内存空间中存放数据</p><ul><li><p>变量的值是可变的: 变量可以被重新赋值，新的值会覆盖原来的值</p></li><li><p>变量的名称: 在开发中，凡是需要自行命名的位置，叫做标识符</p></li></ul><p>标识符的规范：</p><p>1） [必]只能以英文字母、下划线、$开头<br>2)  [必]开头位置不能是数字其他位置可以出现数字<br>3)  [必]不可以与关键字、保留词重复<br>4)  [选]标识符应该做到望文知义<br>5)  [选]如果有多个单词，使用驼峰命名法，第一个单词小写其余单词首字母大写</p><blockquote><p>大驼峰：每个单词首字母大写 JavaScript<br>小驼峰：除第一个单词外，首字母大写 javaScript<br>目前，使用的标识符都是小驼峰命名法。</p></blockquote><ul><li>声明和赋值合并</li></ul><p>变量的声明和赋值可以一条语句书写。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><p>这是语法糖，语法糖仅仅是为了方便代码书写或记忆，并不会有实质性的改变。</p><ul><li>多个变量可以合并声明并赋值<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>  c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span></code></pre></li></ul><p>语法糖</p><ul><li><p><strong>任何可以书写数据的地方，都可以书写变量</strong></p></li><li><p>若使用一个未声明的变量，会导致错误</p></li></ul><p>例外：使用typeof得到类型时，可以是未声明的变量，得到的结果是undefined</p><ul><li><strong>JS中存在变量提升</strong></li></ul><p>所有变量的声明，会自动的提到代码的最顶部,但是这种提升，不会超越脚本块。</p><ul><li><p>JS中允许定义多个同名变量 但需要注意的是同名变量，提升后会变成一个。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// js变量提升演示</span>      <span class="token comment" spellcheck="true">// 输出未声明的变量会报错</span>      <span class="token comment" spellcheck="true">// 此处不报错原因：所有变量的声明 会自动的提升到代码的最顶部</span>      <span class="token comment" spellcheck="true">// 但是这种提升 不会超越脚本快 （一个script为一个脚本块）</span>      <span class="token comment" spellcheck="true">// console.log(a, b);  //输出undefined undefined</span>      <span class="token comment" spellcheck="true">// var a = 1;</span>      <span class="token comment" spellcheck="true">// var b;</span>      <span class="token comment" spellcheck="true">// b = 3;</span>      <span class="token comment" spellcheck="true">// 以上等效于以下</span>      <span class="token keyword">var</span> a<span class="token punctuation">;</span>      <span class="token keyword">var</span> b<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>      a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript语法基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据和数据类型</title>
      <link href="2021/01/02/blog-js-3/"/>
      <url>2021/01/02/blog-js-3/</url>
      
        <content type="html"><![CDATA[<h1 id="数据和数据类型"><a href="#数据和数据类型" class="headerlink" title="数据和数据类型"></a>数据和数据类型</h1><p>数据：有用的信息</p><p>数据类型：数据的分类</p><h2 id="JS中的数据类型"><a href="#JS中的数据类型" class="headerlink" title="JS中的数据类型"></a>JS中的数据类型</h2><p>学习JS中，不同数据类型的数据的书写方式</p><h3 id="原始类型-基本类型"><a href="#原始类型-基本类型" class="headerlink" title="原始类型(基本类型)"></a>原始类型(基本类型)</h3><p>原始类型指不可再细分的类型</p><ol><li>数字类型 number</li><li>字符串类型 string</li><li>布尔类型 boolean</li><li>undefined 类型</li><li>null类型</li></ol><ol><li>数字类型 number</li></ol><p>直接书写即可</p><blockquote><p>以下进制了解即可：<br>数字类型可以加上前缀，来表示不同的进制<br>0：表示8进制<br>0x：表示16进制<br>0b: 表示2进制</p></blockquote><ol start="2"><li>字符串类型 string</li></ol><p>字符串：一长串文本（0个或多个）</p><ul><li>单引号 ‘</li><li>双引号 “</li><li>飘，`，叫做模板字符串</li></ul><p>在字符串中，如何表示一个特殊字符，可以使用转义符（\）</p><pre class=" language-js"><code class="language-js">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hello Word`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// `` -模板字符串 可以换行</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hello                             Word`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"单引号前添加单斜杠\'ooo\'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//显示单引号 在单引号前添加单个反斜杠</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"双号前添加单斜杠\"ooo\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//显示双引号 在双引号前添加单个反斜杠</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"双斜杠显示一个斜杠\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// \\双反斜杠显示一个斜杠\</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello\nWord'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// \n表示换行符</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello\tWord'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// \t表示制表符（tab缩进）</span></code></pre><ol start="3"><li>布尔类型 boolean</li></ol><p>布尔类型用于表达真或假两种状态</p><ul><li>true，表示真</li><li>false，表示假</li></ul><ol start="4"><li>undefined类型</li></ol><p>表示未定义，不存在。</p><p>只有一种数据书写方式：undefined</p><ol start="5"><li>null类型</li></ol><p>表示空，不存在。</p><p>只有一种数据书写方式：null</p><blockquote><p>如何区分某些长数字和字符串: 如果按照数字的方式阅读，则使用数字类型（年龄）；否则使用字符串类型 （省份证号）</p></blockquote><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>引用类型有两种：</p><ul><li>对象 object （事物，东西，玩意儿）</li></ul><p>可以认为，对象，是由多个基本类型组合而成。</p><p>书写对象的格式：</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name<span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            gender<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                country<span class="token punctuation">:</span> <span class="token string">"中国"</span><span class="token punctuation">,</span>                province<span class="token punctuation">:</span> <span class="token string">"江西省"</span><span class="token punctuation">,</span>                city<span class="token punctuation">:</span> <span class="token string">"南昌"</span><span class="token punctuation">,</span>                detail<span class="token punctuation">:</span> <span class="token string">"枫林大道168号"</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>属性</strong>：对象的成员</p><h2 id="得到数据的类型"><a href="#得到数据的类型" class="headerlink" title="得到数据的类型"></a>得到数据的类型</h2><p>在数据前加上 typeof </p><pre class=" language-js"><code class="language-js">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//结果：number</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//结果：string</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//结果：boolean</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//结果：undefined</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//结果：object        </span></code></pre><blockquote><p>js的bug（特征）： typeof null，得到的是object</p></blockquote><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>直接书写的具体的数据，叫做<strong>字面量</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript语法基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个JS程序</title>
      <link href="2021/01/02/blog-js-2/"/>
      <url>2021/01/02/blog-js-2/</url>
      
        <content type="html"><![CDATA[<h1 id="第一个JS程序"><a href="#第一个JS程序" class="headerlink" title="第一个JS程序"></a>第一个JS程序</h1><h2 id="浏览器环境中，代码书写位置"><a href="#浏览器环境中，代码书写位置" class="headerlink" title="浏览器环境中，代码书写位置"></a>浏览器环境中，代码书写位置</h2><ol><li>直接书写到页面中的script元素的内部</li><li>书写到外部的js文件，在页面中引用 [推荐]</li></ol><p>代码分离：内容、样式、功能，三者分离，更加容易维护和阅读</p><ul><li>页面中，可以存在多个script元素，执行顺序从上到下</li><li>如果一个script元素引用了外部文件，内部不能书写任何代码</li><li>script元素有一个可选的属性，type，该属性用于指定代码的类型，该属性值是MIME格式 可以省略不写</li></ul><h2 id="认识基本语法"><a href="#认识基本语法" class="headerlink" title="认识基本语法"></a>认识基本语法</h2><ul><li>语法部分必须都是英文符号</li><li>js代码由多条语句构成，每个语句用英文分号结束（并非强制要求） 但建议添加</li><li>js代码从上到下同步执行</li><li>js语言大小写敏感</li></ul><h2 id="认识输出语句"><a href="#认识输出语句" class="headerlink" title="认识输出语句"></a>认识输出语句</h2><p>所有的输出语句都不是ES标准。</p><ul><li>document.write() 该语句用于将数据输出到页面</li><li>alert() 该语句用于将数据用弹窗的形式显示到页面</li><li>console.log() 该语句用于将数据显示到控制台</li></ul><h2 id="认识输入语句"><a href="#认识输入语句" class="headerlink" title="认识输入语句"></a>认识输入语句</h2><ul><li><p>prompt() 该语句弹出输入框</p><p>所有的输入语句都不是ES标准</p></li></ul><h2 id="认识注释"><a href="#认识注释" class="headerlink" title="认识注释"></a>认识注释</h2><p>注释：提供给代码阅读者使用，不会参与执行</p><ol><li>单行注释  //</li><li>多行注释  /*   */</li></ol><p>在VSCode中，使用快捷键 <kbd>ctrl</kbd> +<kbd>/</kbd>，可以快速添加和取消单行注释<br>使用快捷键 <kbd>alt</kbd>+<kbd>shift</kbd>+<kbd>a</kbd>，可以快速添加和取消多行注释</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript语法基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jvaascript简史与概述</title>
      <link href="2021/01/02/blog-js-1/"/>
      <url>2021/01/02/blog-js-1/</url>
      
        <content type="html"><![CDATA[<h1 id="JS语言概述"><a href="#JS语言概述" class="headerlink" title="JS语言概述"></a>JS语言概述</h1><h2 id="JS语言简史"><a href="#JS语言简史" class="headerlink" title="JS语言简史"></a>JS语言简史</h2><ol><li>JS语言的起源</li></ol><p>网景（Netscape Communication Corperation），1994年，推出第一款商用浏览器，网景浏览器（Netscape Navigator）</p><p>1995年，网景公司决定在浏览器中加入一门语言，可以作交互效果，提高用户体验。</p><p>最终决定独立开发一门新的语言，聘请Brendan Eich，10天后，新的语言诞生</p><p>LiveScript -&gt; JavaScript (JS)</p><p><strong>JS语言之父：Brendan Eich</strong></p><ol start="2"><li>第一次浏览器大战</li></ol><p>网景公司打算在浏览器中加入网络操作系统，影响到微软的利益，引起了微软的注意</p><p>1995年，微软发布IE浏览器。</p><p>JS语言推出之后，网景获得极大的竞争优势。</p><p>微软对JS语言反编译，借鉴JS语言，退出了JScript、VBScript</p><p>第一次浏览器大战是标准之争</p><p>1997，网景公司将javascript1.1版本提交给ECMA（欧洲计算机制造协会）</p><p>IE3发布，并绑定windows操作系统。</p><p>1998年，网景公司，被收购。</p><p><strong>ECMA收录了JavaScript，并提交给ISO，经过修改，成为了第一个JS的标准版本，成为ECMAScript，简称ES</strong></p><h3 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h3><ul><li>两个公司的两个版本的javascript语言备受业界关注，ECMA协会制定了一个名为ECMAScript的标准。</li><li>ECMA定义的只是这门语言的基础，在此基础上可以构建更加完善的脚本语言。</li><li>web浏览器只是ECMAScript实现的宿主环境之一，宿主环境提供基本的ECMAScript的实现，同时也会提供扩展，例如DOM，其他的宿主环境还有(node)</li><li>ECMA标准没有参照浏览器，而是规定了语言的语法，类型，语句，关键字，保留字，操作符，对象。</li><li>ECMAScript就是对实现了该标准的规定的各个方面内容的语言的描述(javascript和ActionScript都实现了该标准)</li><li>ECMAScript的前两个版本没有很多重要的变化，第三个版本才是一次真正意义上的修改涉及到了很多内容，因此第三版标志着ECMAScript成为了一门真正的编程语言</li><li>2009年发布了ECMAScript的第五个版本。</li></ul><ol start="3"><li>第二次浏览器大战</li></ol><p>IE4、IE5、IE6（windows xp）</p><p>微软决定解散浏览器团队。</p><p>Brendan Eich，带领团队成立Mozilla基金会，并决定，将网景浏览器开源。</p><p>长时间内，世界的技术爱好者，对网景浏览器，进行维护和打补丁</p><p>2002，Mozilla推出firefox浏览器。</p><p>2008，谷歌推出chrome浏览器，苹果推出safari，ASA公司推出opera</p><p>chrome浏览器搭载JS执行引擎V8（V8引擎，可以将JS代码直接转换为字节码，理论上，JS代码的执行速度已经接近汇编语言）</p><p>于是，JS具备了编写大型应用程序的能力，甚至服务器应用</p><blockquote><p>Ryan Dahl 准备写一个服务器端的框架，直接利用V8引擎完成了该框架，该框架，称为nodejs</p></blockquote><p><strong>V8引擎，将JS的执行推向了一个新的台阶</strong></p><ol><li>ES标准的发展</li></ol><p>ES1，1997年<br>ES2，1998年<br>ES3，1999年<br>ES5，2009年，习惯上，不再区分 javascript （JS） 和 ECMAScript （ES）<br>ES6，2015年，ECMA宣布，从ES6开始，使用年号作为版本号，ES6的真正称呼为：ES2015<br>ES7，2016年，ES2016</p><p><strong>非常重要：ES制定语言标准，不涉及语言的运行环境。正是因为ES避免了运行环境，就让ES有机会在各种环境中执行。ES称为了通用编程语言</strong></p><p><strong>通常，把ES运行的环境称之为，宿主环境</strong></p><h2 id="JS语言特性"><a href="#JS语言特性" class="headerlink" title="JS语言特性"></a>JS语言特性</h2><blockquote><ol><li>解释型语言</li></ol></blockquote><p>编译型语言：C语言、C++、java语言、C#语言</p><p>编译型语言会经过一个翻译的过程，负责翻译的叫做编译器，翻译的结果，叫做编译结果。</p><p>优点：执行速度快<br>缺点：某个编译结果，难以适用于各种环境（跨平台障碍）；部署繁琐；</p><p>解释型语言：js、php</p><p>解释型语言没有编译结果</p><p>优点：跨平台；部署简单；<br>缺点：执行速度稍慢  </p><blockquote><ol start="2"><li>弱类型语言</li></ol></blockquote><p>弱类型：存放的数据类型可变。优点：灵活、易上手； 缺点：不严谨</p><p>强类型：存放的数据类型不可变。优点：严谨；缺点：不灵活、不易上手</p><blockquote><p>通常，将弱类型的解释型语言，称为脚本语言</p></blockquote><blockquote><ol start="3"><li>单线程</li></ol></blockquote><p>同步现象：上一件事情没有做完，下一件事情必须等待。</p><blockquote><ol start="4"><li>异步</li></ol></blockquote><p>提高单线程的执行效率。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>firstBlog</title>
      <link href="2021/01/01/firstBlog/"/>
      <url>2021/01/01/firstBlog/</url>
      
        <content type="html"><![CDATA[<h1 id="抒写第一篇博客"><a href="#抒写第一篇博客" class="headerlink" title="抒写第一篇博客"></a>抒写第一篇博客</h1><h2 id="第一篇Blog的诞生"><a href="#第一篇Blog的诞生" class="headerlink" title="第一篇Blog的诞生:"></a>第一篇Blog的诞生:</h2><p>在只学过小部分web基础上搭建了这个小破站，中途的优化还是有些吃力，太多没有接触的知识、原理，庆幸还可以面向百度面向大佬<br>如果没有这些大佬的解惑和超时空的问答，大概我已经暂时放弃了，待到知识备全在重新开始。  </p><p>实现了Blog的搭建和部署，从而也学会和理解了很多零散的知识点，对以后或许没有太大作用但不积跬步何以至千里？</p><p><img src="https://i.loli.net/2021/02/17/txgbKumXaOGApSU.jpg"><br><strong>谢同学或许会偶尔怀疑自己的能力，但谢同学永远坚信明天会更好</strong></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
