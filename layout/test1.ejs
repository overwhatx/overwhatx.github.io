<!-- 下雨 -->
<canvas id="canvas" style="position: absolute; height: 100%; width:100%;"></canvas>
<!-- 爱心 -->
<canvas id="pinkboard"></canvas>
<!-- 霓虹灯 -->
<div class="top">
    <ul class="light">
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
    </ul>
</div>

<!-- 霓虹灯 -->
<style>
    * {
        margin: 0;
        padding: 0;
    }

    html {
        font-size: 14px;
    }

    body {
        width: 100%;
        height: 100vh;
        background-color: var(--background-color);
        font-family: 'Montserrat', sans-serif, Arial, 'Microsoft Yahei';

    }

    .top {
        margin-bottom: 700px;
    }

    :root {
        --background-color: #000;
        --color1: rgba(255, 217, 0);
        --color1-1: rgba(255, 217, 0, 0.4);
        --color1-2: rgba(255, 217, 0, 0.2);
        --color2: rgba(248, 4, 90);
        --color2-1: rgba(248, 4, 90, 0.4);
        --color2-2: rgba(248, 4, 90, 0.2);
        --color3: rgba(41, 157, 245);
        --color3-1: rgba(9, 132, 227, 0.4);
        --color3-2: rgba(9, 132, 227, 0.2);
        --color4: rgba(25, 216, 50);
        --color4-1: rgba(25, 216, 50, 0.4);
        --color4-2: rgba(25, 216, 50, 0.2);
        --width: 12px;
        --height: 28px;
        --spacing: 40px;
    }

    .light {
        width: 100vw;
        height: calc(var(--height) * 2);
        list-style: none;
        white-space: nowrap;
        overflow: hidden;
    }

    .light li {
        position: relative;
        display: inline-block;
        margin-right: var(--spacing);
        width: var(--width);
        height: var(--height);
        border-radius: 50%;
        animation: flash-1 2s ease infinite;
    }

    .light li:nth-child(2n+1) {
        animation: flash-2 0.5s ease infinite;
    }

    .light li:nth-child(4n+2) {
        animation: flash-3 1.2s ease infinite;
    }

    .light li:nth-child(5n+3) {
        animation: flash-4 .8s ease infinite;
    }

    .light li:nth-child(odd) {
        animation-duration: 1.7s;
    }

    .light li:nth-child(3n+1) {
        animation-duration: 1.3s;
    }

    .light li::before {
        position: absolute;
        content: '';
        background-color: #333;
        width: 100%;
        height: 25%;
        border-radius: 5px;
    }

    .light li::after {
        position: absolute;
        content: '';
        width: calc(var(--width) + var(--spacing));
        height: 60%;
        left: calc(var(--width) / 2);
        border-bottom: 2px solid #333;
        border-radius: 50%;
        transform: translateY(-50%);
    }

    .light li:last-child::after {
        content: none;
    }

    @keyframes flash-1 {

        0%,
        100% {
            background-color: var(--color1);
            box-shadow: 0 5px 24px 3px var(--color1)
        }

        50% {
            background-color: var(--color1-1);
            box-shadow: 0 5px 24px 3px var(--color1-2)
        }
    }

    @keyframes flash-2 {

        0%,
        100% {
            background-color: var(--color2);
            box-shadow: 0 5px 24px 3px var(--color2)
        }

        50% {
            background-color: var(--color2-1);
            box-shadow: 0 5px 24px 3px var(--color2-2)
        }
    }

    @keyframes flash-3 {

        0%,
        100% {
            background-color: var(--color3);
            box-shadow: 0 5px 24px 3px var(--color3)
        }

        50% {
            background-color: var(--color3-1);
            box-shadow: 0 5px 24px 3px var(--color3-2)
        }
    }

    @keyframes flash-4 {

        0%,
        100% {
            background-color: var(--color4);
            box-shadow: 0 5px 24px 3px var(--color4)
        }

        50% {
            background-color: var(--color4-1);
            box-shadow: 0 5px 24px 3px var(--color4-2)
        }
    }
</style>
<!-- 爱心 -->
<style>
    #pinkboard {
        position: absolute;
        width: 100%;
        height: 100%;
    }
</style>
<!-- 下雨 -->
<script>
    window.onload = main;

    function getRgb(r, g, b) {
        return "rgb(" + r + "," + g + "," + b + ")";
    }

    function main() {
        //drop
        var dropList = [];
        var gravity = 0.5;
        //
        var linelist = [];
        var canvasEl = document.getElementById('canvas');
        var ctx = canvasEl.getContext('2d');
        var mousePos = [0, 0];
        var backgroundColor = '#000';
        canvasEl.width = canvasEl.clientWidth;
        canvasEl.height = canvasEl.clientHeight;
        var speedx = 0;
        var maxspeedx = 0;
        window.onresize = function () {
            canvasEl.width = canvasEl.clientWidth;
            canvasEl.height = canvasEl.clientHeight;
        }
        window.onmousemove = function (e) {
            mousePos[0] = e.clientX;
            mousePos[1] = e.clientY;
            maxspeedx = (e.clientX - canvasEl.clientWidth / 2) / (canvasEl.clientWidth / 2);
        }
        // window.onmousedown=function(e)
        function createLine(e) {
            var temp = 0.25 * (50 + Math.random() * 100);
            var myline = {
                speed: 5.5 * (Math.random() * 6 + 3),
                die: false,
                posx: e,
                posy: -200,
                h: temp,
                color: getRgb(Math.floor(temp * 255 / 75), Math.floor(temp * 255 / 75), Math.floor(temp * 255 / 75))
            };
            linelist.push(myline);
        }
        window.requestAnimationFrame(update);
        function createDrop(x, y) {
            var mydrop = {
                die: false,
                posx: x,
                posy: y,
                vx: (Math.random() - 0.5) * 8,
                vy: Math.random() * (-6) - 3,
                radius: Math.random() * 1.5 + 1
            };
            return mydrop;
        }

        function madedrops(x, y) {
            var maxi = Math.floor(Math.random() * 5 + 5);
            for (var i = 0; i < maxi; i++) {
                dropList.push(createDrop(x, y));
            }
        }

        function update() {
            if (dropList.length > 0) {
                dropList.forEach(function (e) {
                    e.vx = e.vx + (speedx) / 2;
                    e.posx = e.posx + e.vx;
                    e.vy = e.vy + gravity;
                    e.posy = e.posy + e.vy;
                    if (e.posy > canvasEl.clientHeight) {
                        e.die = true;
                    }
                });
            }
            for (var i = dropList.length - 1; i >= 0; i--) {
                //delite die
                if (dropList[i].die) {
                    dropList.splice(i, 1);
                }
            }

            speedx = speedx + (maxspeedx - speedx) / 50;

            if (Math.random() > 0) {
                createLine(Math.random() * 2 * canvasEl.width - (0.5 * canvasEl.width));
                createLine(Math.random() * 2 * canvasEl.width - (0.5 * canvasEl.width));
                createLine(Math.random() * 2 * canvasEl.width - (0.5 * canvasEl.width));
            }
            var mydeadline = canvasEl.clientHeight - Math.random() * canvasEl.clientHeight / 5;
            linelist.forEach(function (e) {
                var dis = Math.sqrt(((e.posx + speedx * e.h) - mousePos[0]) * ((e.posx + speedx * e.h) - mousePos[0]) + (e.posy + e.h - mousePos[1]) * (e.posy + e.h - mousePos[1]));
                if (dis < 35) {
                    madedrops(e.posx + speedx * e.h, e.posy + e.h);
                    e.die = true;
                }

                if ((e.posy + e.h) > mydeadline) {
                    if (Math.random() > 0.85) {
                        madedrops(e.posx + speedx * e.h, e.posy + e.h);
                        e.die = true;
                    }
                }
                if (e.posy >= canvasEl.clientHeight) {
                    e.die = true;
                } else {
                    e.posy = e.posy + e.speed;
                    e.posx = e.posx + (e.speed * speedx);
                }
            });
            for (var i = linelist.length - 1; i >= 0; i--) {
                if (linelist[i].die) {
                    linelist.splice(i, 1);
                }
            }
            render();
            window.requestAnimationFrame(update);
        }
        function render() {
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(0, 0, canvasEl.width, canvasEl.height);

            linelist.forEach(
                function (line) {

                    ctx.strokeStyle = line.color;
                    ctx.lineWidth = 4.5;
                    ctx.beginPath();
                    ctx.moveTo(line.posx, line.posy);
                    ctx.lineTo(line.posx + speedx * line.h, line.posy + line.h);
                    ctx.stroke();
                });
            ctx.lineWidth = 1;
            ctx.strokeStyle = "#fff";
            dropList.forEach(function (e) {
                ctx.beginPath();
                ctx.arc(e.posx, e.posy, e.radius, Math.random() * Math.PI * 2, 1 * Math.PI);
                ctx.stroke();
            });
        }


    }
</script>


<!-- 爱心 -->
<script>
    /*
     * Settings
     */
    var settings = {
        particles: {
            length: 500, // maximum amount of particles
            duration: 2, // particle duration in sec
            velocity: 100, // particle velocity in pixels/sec
            effect: -0.75, // play with this for a nice effect
            size: 30, // particle size in pixels
        },
    };

    /*
     * RequestAnimationFrame polyfill by Erik M?ller
     */
    (function () { var b = 0; var c = ["ms", "moz", "webkit", "o"]; for (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) { window.requestAnimationFrame = window[c[a] + "RequestAnimationFrame"]; window.cancelAnimationFrame = window[c[a] + "CancelAnimationFrame"] || window[c[a] + "CancelRequestAnimationFrame"] } if (!window.requestAnimationFrame) { window.requestAnimationFrame = function (h, e) { var d = new Date().getTime(); var f = Math.max(0, 16 - (d - b)); var g = window.setTimeout(function () { h(d + f) }, f); b = d + f; return g } } if (!window.cancelAnimationFrame) { window.cancelAnimationFrame = function (d) { clearTimeout(d) } } }());

    /*
     * Point class
     */
    var Point = (function () {
        function Point(x, y) {
            this.x = (typeof x !== 'undefined') ? x : 0;
            this.y = (typeof y !== 'undefined') ? y : 0;
        }
        Point.prototype.clone = function () {
            return new Point(this.x, this.y);
        };
        Point.prototype.length = function (length) {
            if (typeof length == 'undefined')
                return Math.sqrt(this.x * this.x + this.y * this.y);
            this.normalize();
            this.x *= length;
            this.y *= length;
            return this;
        };
        Point.prototype.normalize = function () {
            var length = this.length();
            this.x /= length;
            this.y /= length;
            return this;
        };
        return Point;
    })();

    /*
     * Particle class
     */
    var Particle = (function () {
        function Particle() {
            this.position = new Point();
            this.velocity = new Point();
            this.acceleration = new Point();
            this.age = 0;
        }
        Particle.prototype.initialize = function (x, y, dx, dy) {
            this.position.x = x;
            this.position.y = y;
            this.velocity.x = dx;
            this.velocity.y = dy;
            this.acceleration.x = dx * settings.particles.effect;
            this.acceleration.y = dy * settings.particles.effect;
            this.age = 0;
        };
        Particle.prototype.update = function (deltaTime) {
            this.position.x += this.velocity.x * deltaTime;
            this.position.y += this.velocity.y * deltaTime;
            this.velocity.x += this.acceleration.x * deltaTime;
            this.velocity.y += this.acceleration.y * deltaTime;
            this.age += deltaTime;
        };
        Particle.prototype.draw = function (context, image) {
            function ease(t) {
                return (--t) * t * t + 1;
            }
            var size = image.width * ease(this.age / settings.particles.duration);
            context.globalAlpha = 1 - this.age / settings.particles.duration;
            context.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size);
        };
        return Particle;
    })();

    /*
     * ParticlePool class
     */
    var ParticlePool = (function () {
        var particles,
            firstActive = 0,
            firstFree = 0,
            duration = settings.particles.duration;

        function ParticlePool(length) {
            // create and populate particle pool
            particles = new Array(length);
            for (var i = 0; i < particles.length; i++)
                particles[i] = new Particle();
        }
        ParticlePool.prototype.add = function (x, y, dx, dy) {
            particles[firstFree].initialize(x, y, dx, dy);

            // handle circular queue
            firstFree++;
            if (firstFree == particles.length) firstFree = 0;
            if (firstActive == firstFree) firstActive++;
            if (firstActive == particles.length) firstActive = 0;
        };
        ParticlePool.prototype.update = function (deltaTime) {
            var i;

            // update active particles
            if (firstActive < firstFree) {
                for (i = firstActive; i < firstFree; i++)
                    particles[i].update(deltaTime);
            }
            if (firstFree < firstActive) {
                for (i = firstActive; i < particles.length; i++)
                    particles[i].update(deltaTime);
                for (i = 0; i < firstFree; i++)
                    particles[i].update(deltaTime);
            }

            // remove inactive particles
            while (particles[firstActive].age >= duration && firstActive != firstFree) {
                firstActive++;
                if (firstActive == particles.length) firstActive = 0;
            }


        };
        ParticlePool.prototype.draw = function (context, image) {
            // draw active particles
            if (firstActive < firstFree) {
                for (i = firstActive; i < firstFree; i++)
                    particles[i].draw(context, image);
            }
            if (firstFree < firstActive) {
                for (i = firstActive; i < particles.length; i++)
                    particles[i].draw(context, image);
                for (i = 0; i < firstFree; i++)
                    particles[i].draw(context, image);
            }
        };
        return ParticlePool;
    })();

    /*
     * Putting it all together
     */
    (function (canvas) {
        var context = canvas.getContext('2d'),
            particles = new ParticlePool(settings.particles.length),
            particleRate = settings.particles.length / settings.particles.duration, // particles/sec
            time;

        // get point on heart with -PI <= t <= PI
        function pointOnHeart(t) {
            return new Point(
                160 * Math.pow(Math.sin(t), 3),
                130 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25
            );
        }

        // creating the particle image using a dummy canvas
        var image = (function () {
            var canvas = document.createElement('canvas'),
                context = canvas.getContext('2d');
            canvas.width = settings.particles.size;
            canvas.height = settings.particles.size;
            // helper function to create the path
            function to(t) {
                var point = pointOnHeart(t);
                point.x = settings.particles.size / 2 + point.x * settings.particles.size / 350;
                point.y = settings.particles.size / 2 - point.y * settings.particles.size / 350;
                return point;
            }
            // create the path
            context.beginPath();
            var t = -Math.PI;
            var point = to(t);
            context.moveTo(point.x, point.y);
            while (t < Math.PI) {
                t += 0.01; // baby steps!
                point = to(t);
                context.lineTo(point.x, point.y);
            }
            context.closePath();
            // create the fill
            context.fillStyle = '#ea80b0';
            context.fill();
            // create the image
            var image = new Image();
            image.src = canvas.toDataURL();
            return image;
        })();

        // render that thing!
        function render() {
            // next animation frame
            requestAnimationFrame(render);

            // update time
            var newTime = new Date().getTime() / 1000,
                deltaTime = newTime - (time || newTime);
            time = newTime;

            // clear canvas
            context.clearRect(0, 0, canvas.width, canvas.height);

            // create new particles
            var amount = particleRate * deltaTime;
            for (var i = 0; i < amount; i++) {
                var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());
                var dir = pos.clone().length(settings.particles.velocity);
                particles.add(canvas.width / 2 + pos.x, canvas.height / 2 - pos.y, dir.x, -dir.y);
            }

            // update and draw particles
            particles.update(deltaTime);
            particles.draw(context, image);
        }

        // handle (re-)sizing of the canvas
        function onResize() {
            canvas.width = canvas.clientWidth;
            canvas.height = canvas.clientHeight;
        }
        window.onresize = onResize;

        // delay rendering bootstrap
        setTimeout(function () {
            onResize();
            render();
        }, 10);
    })(document.getElementById('pinkboard'));</script>